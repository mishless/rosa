
ROSA.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00000e34  80000008  80000008  00000408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000400  80001000  80001000  00001400  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000188  80001400  80001400  00001800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         0000010c  00000008  80001588  00001c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  00000114  80001694  00001d14  2**0
                  ALLOC
  8 .bss          00000010  00000118  00000118  00000000  2**2
                  ALLOC
  9 .heap         0000ded8  00000128  00000128  00000000  2**0
                  ALLOC
 10 .comment      000000a0  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000330  00000000  00000000  00001db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 0000053c  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00007e7f  00000000  00000000  00002624  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001239  00000000  00000000  0000a4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000022e5  00000000  00000000  0000b6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000710  00000000  00000000  0000d9c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000130c  00000000  00000000  0000e0d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00000b10  00000000  00000000  0000f3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 0045158b  00000000  00000000  0000fef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .appstack     00001000  0000e000  0000e000  00000000  2**0
                  ALLOC
 21 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 22 .debug_ranges 000002e0  00000000  00000000  0046147b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	00 00       	add	r0,r0
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	0c 58       	eor	r8,r6

Disassembly of section .text:

80000008 <num2str>:
		cycles--;
	}
}

void num2str(unsigned int num, char*str)
{
80000008:	eb cd 40 80 	pushm	r7,lr
8000000c:	1a 97       	mov	r7,sp
8000000e:	20 4d       	sub	sp,16
80000010:	ef 4c ff f4 	st.w	r7[-12],r12
80000014:	ef 4b ff f0 	st.w	r7[-16],r11
	unsigned int exp = 1;
80000018:	30 18       	mov	r8,1
8000001a:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int digit;
	if(num == 0)
8000001e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000022:	58 08       	cp.w	r8,0
80000024:	c1 41       	brne	8000004c <num2str+0x44>
	{
		str[0] = '0';
80000026:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000002a:	33 08       	mov	r8,48
8000002c:	b2 88       	st.b	r9[0x0],r8
		str[1] = 0;
8000002e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000032:	f0 c9 ff ff 	sub	r9,r8,-1
80000036:	30 08       	mov	r8,0
80000038:	b2 88       	st.b	r9[0x0],r8
		return;
8000003a:	c4 e8       	rjmp	800000d6 <num2str+0xce>
	}
	while(exp <= num) exp*= 10;
8000003c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000040:	12 98       	mov	r8,r9
80000042:	a3 68       	lsl	r8,0x2
80000044:	12 08       	add	r8,r9
80000046:	a1 78       	lsl	r8,0x1
80000048:	ef 48 ff f8 	st.w	r7[-8],r8
8000004c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000050:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000054:	10 39       	cp.w	r9,r8
80000056:	fe 98 ff f3 	brls	8000003c <num2str+0x34>
	exp/=10;
8000005a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000005e:	e0 68 cc cd 	mov	r8,52429
80000062:	ea 18 cc cc 	orh	r8,0xcccc
80000066:	f2 08 06 48 	mulu.d	r8,r9,r8
8000006a:	f2 08 16 03 	lsr	r8,r9,0x3
8000006e:	ef 48 ff f8 	st.w	r7[-8],r8
	
	do
	{
		digit = num/exp;
80000072:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000076:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000007a:	f0 09 0d 08 	divu	r8,r8,r9
8000007e:	ef 48 ff fc 	st.w	r7[-4],r8
		*str++ = digit + '0';
80000082:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000086:	5c 58       	castu.b	r8
80000088:	2d 08       	sub	r8,-48
8000008a:	5c 58       	castu.b	r8
8000008c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000090:	b2 88       	st.b	r9[0x0],r8
80000092:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000096:	2f f8       	sub	r8,-1
80000098:	ef 48 ff f0 	st.w	r7[-16],r8
		num = num % exp;
8000009c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800000a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800000a4:	f0 09 0d 08 	divu	r8,r8,r9
800000a8:	12 98       	mov	r8,r9
800000aa:	ef 48 ff f4 	st.w	r7[-12],r8
		exp/=10;
800000ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800000b2:	e0 68 cc cd 	mov	r8,52429
800000b6:	ea 18 cc cc 	orh	r8,0xcccc
800000ba:	f2 08 06 48 	mulu.d	r8,r9,r8
800000be:	f2 08 16 03 	lsr	r8,r9,0x3
800000c2:	ef 48 ff f8 	st.w	r7[-8],r8
	} while (exp != 0);
800000c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800000ca:	58 08       	cp.w	r8,0
800000cc:	cd 31       	brne	80000072 <num2str+0x6a>
	*str = 0;
800000ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
800000d2:	30 08       	mov	r8,0
800000d4:	b2 88       	st.b	r9[0x0],r8
800000d6:	2f cd       	sub	sp,-16
800000d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800000dc <usart_options>:
800000dc:	00 00 e1 00 08 04 00 00 00 00 00 00 54 45 53 54     ............TEST
800000ec:	2d 53 54 55 46 46 2d 30 31 00 00 00 54 48 49 53     -STUFF-01...THIS
800000fc:	2d 49 53 2d 54 45 53 54 2d 49 44 2d 30 32 00 00     -IS-TEST-ID-02..
8000010c:	48 49 2d 4d 49 48 41 45 4c 41 2d 30 33 00 00 00     HI-MIHAELA-03...

8000011c <set_wdt>:
#define WDT_CONTROL (*((volatile unsigned int*) 0xFFFF0D30))
#define WDT_CLEAR_OFFSET 0x04
#define WDT_CLEAR (*((volatile unsigned int*) (0xFFFF0D30+WDT_CLEAR_OFFSET)))

void set_wdt(unsigned int psel)
{
8000011c:	eb cd 40 80 	pushm	r7,lr
80000120:	1a 97       	mov	r7,sp
80000122:	20 1d       	sub	sp,4
80000124:	ef 4c ff fc 	st.w	r7[-4],r12
	WDT_CONTROL = (0x55 << 24) | (psel << 8) | 0x1;
80000128:	fe 78 0d 30 	mov	r8,-62160
8000012c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000130:	a9 69       	lsl	r9,0x8
80000132:	ea 19 55 00 	orh	r9,0x5500
80000136:	e8 19 00 01 	orl	r9,0x1
8000013a:	91 09       	st.w	r8[0x0],r9
	WDT_CONTROL = (0xAA << 24) | (psel << 8) | 0x1;
8000013c:	fe 78 0d 30 	mov	r8,-62160
80000140:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000144:	a9 69       	lsl	r9,0x8
80000146:	ea 19 aa 00 	orh	r9,0xaa00
8000014a:	e8 19 00 01 	orl	r9,0x1
8000014e:	91 09       	st.w	r8[0x0],r9
}
80000150:	2f fd       	sub	sp,-4
80000152:	e3 cd 80 80 	ldm	sp++,r7,pc

80000156 <disable_wdt>:

void disable_wdt()
{
80000156:	eb cd 40 80 	pushm	r7,lr
8000015a:	1a 97       	mov	r7,sp
	WDT_CONTROL = (0x55 << 24) | (31 << 8);
8000015c:	fe 78 0d 30 	mov	r8,-62160
80000160:	e0 69 1f 00 	mov	r9,7936
80000164:	ea 19 55 00 	orh	r9,0x5500
80000168:	91 09       	st.w	r8[0x0],r9
	WDT_CONTROL = (0xAA << 24) | (31 << 8);
8000016a:	fe 78 0d 30 	mov	r8,-62160
8000016e:	e0 69 1f 00 	mov	r9,7936
80000172:	ea 19 aa 00 	orh	r9,0xaa00
80000176:	91 09       	st.w	r8[0x0],r9
}
80000178:	e3 cd 80 80 	ldm	sp++,r7,pc

8000017c <test10>:
#define WAIT for(global_i = 0; global_i<800000;global_i++);

unsigned int global_i;

void test10(void)
{
8000017c:	eb cd 40 80 	pushm	r7,lr
80000180:	1a 97       	mov	r7,sp
	usartWriteLine(&AVR32_USART0, "TEST-STUFF-01");
80000182:	49 2b       	lddpc	r11,800001c8 <test10+0x4c>
80000184:	fe 7c 14 00 	mov	r12,-60416
80000188:	f0 1f 00 11 	mcall	800001cc <test10+0x50>
	usartWriteChar(&AVR32_USART0, 0);
8000018c:	30 0b       	mov	r11,0
8000018e:	fe 7c 14 00 	mov	r12,-60416
80000192:	f0 1f 00 10 	mcall	800001d0 <test10+0x54>
	gpioClear(LED0_GPIO);
80000196:	33 bc       	mov	r12,59
80000198:	f0 1f 00 0f 	mcall	800001d4 <test10+0x58>
	WAIT
8000019c:	48 f8       	lddpc	r8,800001d8 <test10+0x5c>
8000019e:	30 09       	mov	r9,0
800001a0:	91 09       	st.w	r8[0x0],r9
800001a2:	c0 78       	rjmp	800001b0 <test10+0x34>
800001a4:	48 d8       	lddpc	r8,800001d8 <test10+0x5c>
800001a6:	70 08       	ld.w	r8,r8[0x0]
800001a8:	f0 c9 ff ff 	sub	r9,r8,-1
800001ac:	48 b8       	lddpc	r8,800001d8 <test10+0x5c>
800001ae:	91 09       	st.w	r8[0x0],r9
800001b0:	48 a8       	lddpc	r8,800001d8 <test10+0x5c>
800001b2:	70 08       	ld.w	r8,r8[0x0]
800001b4:	ec 48 34 ff 	cp.w	r8,799999
800001b8:	fe 98 ff f6 	brls	800001a4 <test10+0x28>
	usartWriteChar(&AVR32_USART0, FAILURE_CHAR);
800001bc:	35 fb       	mov	r11,95
800001be:	fe 7c 14 00 	mov	r12,-60416
800001c2:	f0 1f 00 04 	mcall	800001d0 <test10+0x54>
	BLOCK
800001c6:	c0 08       	rjmp	800001c6 <test10+0x4a>
800001c8:	80 00       	ld.sh	r0,r0[0x0]
800001ca:	00 e8       	st.h	--r0,r8
800001cc:	80 00       	ld.sh	r0,r0[0x0]
800001ce:	0a 70       	tst	r0,r5
800001d0:	80 00       	ld.sh	r0,r0[0x0]
800001d2:	0a 18       	sub	r8,r5
800001d4:	80 00       	ld.sh	r0,r0[0x0]
800001d6:	05 f4       	ld.ub	r4,r2[0x7]
800001d8:	00 00       	add	r0,r0
800001da:	01 18       	ld.sh	r8,r0++

800001dc <test2>:
}

void test2(void)
{
800001dc:	eb cd 40 80 	pushm	r7,lr
800001e0:	1a 97       	mov	r7,sp
	usartWriteLine(&AVR32_USART0, "THIS-IS-TEST-ID-02");
800001e2:	48 8b       	lddpc	r11,80000200 <test2+0x24>
800001e4:	fe 7c 14 00 	mov	r12,-60416
800001e8:	f0 1f 00 07 	mcall	80000204 <test2+0x28>
	usartWriteChar(&AVR32_USART0, 0);
800001ec:	30 0b       	mov	r11,0
800001ee:	fe 7c 14 00 	mov	r12,-60416
800001f2:	f0 1f 00 06 	mcall	80000208 <test2+0x2c>
	gpioClear(LED1_GPIO);
800001f6:	33 cc       	mov	r12,60
800001f8:	f0 1f 00 05 	mcall	8000020c <test2+0x30>
	BLOCK
800001fc:	c0 08       	rjmp	800001fc <test2+0x20>
800001fe:	00 00       	add	r0,r0
80000200:	80 00       	ld.sh	r0,r0[0x0]
80000202:	00 f8       	st.b	--r0,r8
80000204:	80 00       	ld.sh	r0,r0[0x0]
80000206:	0a 70       	tst	r0,r5
80000208:	80 00       	ld.sh	r0,r0[0x0]
8000020a:	0a 18       	sub	r8,r5
8000020c:	80 00       	ld.sh	r0,r0[0x0]
8000020e:	05 f4       	ld.ub	r4,r2[0x7]

80000210 <test3>:
}

void test3(void)
{
80000210:	eb cd 40 80 	pushm	r7,lr
80000214:	1a 97       	mov	r7,sp
	usartWriteLine(&AVR32_USART0, "HI-MIHAELA-03");
80000216:	49 2b       	lddpc	r11,8000025c <test3+0x4c>
80000218:	fe 7c 14 00 	mov	r12,-60416
8000021c:	f0 1f 00 11 	mcall	80000260 <test3+0x50>
	usartWriteChar(&AVR32_USART0, 0);
80000220:	30 0b       	mov	r11,0
80000222:	fe 7c 14 00 	mov	r12,-60416
80000226:	f0 1f 00 10 	mcall	80000264 <test3+0x54>
	gpioClear(LED2_GPIO);
8000022a:	33 dc       	mov	r12,61
8000022c:	f0 1f 00 0f 	mcall	80000268 <test3+0x58>
	WAIT
80000230:	48 f8       	lddpc	r8,8000026c <test3+0x5c>
80000232:	30 09       	mov	r9,0
80000234:	91 09       	st.w	r8[0x0],r9
80000236:	c0 78       	rjmp	80000244 <test3+0x34>
80000238:	48 d8       	lddpc	r8,8000026c <test3+0x5c>
8000023a:	70 08       	ld.w	r8,r8[0x0]
8000023c:	f0 c9 ff ff 	sub	r9,r8,-1
80000240:	48 b8       	lddpc	r8,8000026c <test3+0x5c>
80000242:	91 09       	st.w	r8[0x0],r9
80000244:	48 a8       	lddpc	r8,8000026c <test3+0x5c>
80000246:	70 08       	ld.w	r8,r8[0x0]
80000248:	ec 48 34 ff 	cp.w	r8,799999
8000024c:	fe 98 ff f6 	brls	80000238 <test3+0x28>
	usartWriteChar(&AVR32_USART0, SUCCESS_CHAR);
80000250:	35 eb       	mov	r11,94
80000252:	fe 7c 14 00 	mov	r12,-60416
80000256:	f0 1f 00 04 	mcall	80000264 <test3+0x54>
	BLOCK
8000025a:	c0 08       	rjmp	8000025a <test3+0x4a>
8000025c:	80 00       	ld.sh	r0,r0[0x0]
8000025e:	01 0c       	ld.w	r12,r0++
80000260:	80 00       	ld.sh	r0,r0[0x0]
80000262:	0a 70       	tst	r0,r5
80000264:	80 00       	ld.sh	r0,r0[0x0]
80000266:	0a 18       	sub	r8,r5
80000268:	80 00       	ld.sh	r0,r0[0x0]
8000026a:	05 f4       	ld.ub	r4,r2[0x7]
8000026c:	00 00       	add	r0,r0
8000026e:	01 18       	ld.sh	r8,r0++

80000270 <main>:

/*Pointers to all the test cases*/
void (*tests[])(void) = {test10, test2, test3};

int main(void)
{
80000270:	eb cd 40 80 	pushm	r7,lr
80000274:	1a 97       	mov	r7,sp
80000276:	20 ad       	sub	sp,40
	char c = 0;
80000278:	30 08       	mov	r8,0
8000027a:	ef 68 ff f7 	st.b	r7[-9],r8
	char str[MAX_STR_LEN];
	unsigned int test_to_run = -1;
8000027e:	3f f8       	mov	r8,-1
80000280:	ef 48 ff f8 	st.w	r7[-8],r8
	unsigned int task_num = sizeof(tests)/sizeof(int*);
80000284:	30 38       	mov	r8,3
80000286:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/*Set up the system*/
	disable_wdt();
8000028a:	f0 1f 00 29 	mcall	8000032c <main+0xbc>
	ROSA_init();
8000028e:	f0 1f 00 29 	mcall	80000330 <main+0xc0>
	set_wdt(17);
80000292:	31 1c       	mov	r12,17
80000294:	f0 1f 00 28 	mcall	80000334 <main+0xc4>
80000298:	c0 28       	rjmp	8000029c <main+0x2c>
			test_to_run = atoi(str);
			
			/*Run the selected test*/
			tests[test_to_run]();
		}
	}
8000029a:	d7 03       	nop
	set_wdt(17);
	
	/*Start the communication*/
	while(1)
	{
		usartWriteChar(&AVR32_USART0, '?');
8000029c:	33 fb       	mov	r11,63
8000029e:	fe 7c 14 00 	mov	r12,-60416
800002a2:	f0 1f 00 26 	mcall	80000338 <main+0xc8>

		while((c = usartGetChar(&AVR32_USART0)) == 0);
800002a6:	fe 7c 14 00 	mov	r12,-60416
800002aa:	f0 1f 00 25 	mcall	8000033c <main+0xcc>
800002ae:	18 98       	mov	r8,r12
800002b0:	ef 68 ff f7 	st.b	r7[-9],r8
800002b4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800002b8:	30 08       	mov	r8,0
800002ba:	f0 09 18 00 	cp.b	r9,r8
800002be:	cf 40       	breq	800002a6 <main+0x36>
			
		/*Does PC want the number of tests?*/
		if(c == '#')
800002c0:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800002c4:	32 38       	mov	r8,35
800002c6:	f0 09 18 00 	cp.b	r9,r8
800002ca:	c1 51       	brne	800002f4 <main+0x84>
		{
			/*Tell the PC the number of tests*/
			num2str(task_num, str);
800002cc:	ee c8 00 28 	sub	r8,r7,40
800002d0:	10 9b       	mov	r11,r8
800002d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800002d6:	f0 1f 00 1b 	mcall	80000340 <main+0xd0>
			usartWriteLine(&AVR32_USART0, str);
800002da:	ee c8 00 28 	sub	r8,r7,40
800002de:	10 9b       	mov	r11,r8
800002e0:	fe 7c 14 00 	mov	r12,-60416
800002e4:	f0 1f 00 18 	mcall	80000344 <main+0xd4>
			usartWriteChar(&AVR32_USART0, 0);
800002e8:	30 0b       	mov	r11,0
800002ea:	fe 7c 14 00 	mov	r12,-60416
800002ee:	f0 1f 00 13 	mcall	80000338 <main+0xc8>
			test_to_run = atoi(str);
			
			/*Run the selected test*/
			tests[test_to_run]();
		}
	}
800002f2:	cd 5b       	rjmp	8000029c <main+0x2c>
			usartWriteLine(&AVR32_USART0, str);
			usartWriteChar(&AVR32_USART0, 0);
		}
			
		/*The PC sent a test number to run*/
		else if(c == '%')
800002f4:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800002f8:	32 58       	mov	r8,37
800002fa:	f0 09 18 00 	cp.b	r9,r8
800002fe:	cc e1       	brne	8000029a <main+0x2a>
		{
			/*Get the desired test from the PC*/
			usartGetLine(&AVR32_USART0, str);		
80000300:	ee c8 00 28 	sub	r8,r7,40
80000304:	10 9b       	mov	r11,r8
80000306:	fe 7c 14 00 	mov	r12,-60416
8000030a:	f0 1f 00 10 	mcall	80000348 <main+0xd8>
			test_to_run = atoi(str);
8000030e:	ee c8 00 28 	sub	r8,r7,40
80000312:	10 9c       	mov	r12,r8
80000314:	f0 1f 00 0e 	mcall	8000034c <main+0xdc>
80000318:	18 98       	mov	r8,r12
8000031a:	ef 48 ff f8 	st.w	r7[-8],r8
			
			/*Run the selected test*/
			tests[test_to_run]();
8000031e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000322:	48 c8       	lddpc	r8,80000350 <main+0xe0>
80000324:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80000328:	5d 18       	icall	r8
		}
	}
8000032a:	cb 9b       	rjmp	8000029c <main+0x2c>
8000032c:	80 00       	ld.sh	r0,r0[0x0]
8000032e:	01 56       	ld.sh	r6,--r0
80000330:	80 00       	ld.sh	r0,r0[0x0]
80000332:	03 84       	ld.ub	r4,r1[0x0]
80000334:	80 00       	ld.sh	r0,r0[0x0]
80000336:	01 1c       	ld.sh	r12,r0++
80000338:	80 00       	ld.sh	r0,r0[0x0]
8000033a:	0a 18       	sub	r8,r5
8000033c:	80 00       	ld.sh	r0,r0[0x0]
8000033e:	0a c4       	st.b	r5++,r4
80000340:	80 00       	ld.sh	r0,r0[0x0]
80000342:	00 08       	add	r8,r0
80000344:	80 00       	ld.sh	r0,r0[0x0]
80000346:	0a 70       	tst	r0,r5
80000348:	80 00       	ld.sh	r0,r0[0x0]
8000034a:	0b 04       	ld.w	r4,r5++
8000034c:	80 00       	ld.sh	r0,r0[0x0]
8000034e:	0c d8       	st.w	--r6,r8
80000350:	00 00       	add	r0,r0
80000352:	00 08       	add	r8,r0

80000354 <ROSA_yieldFromISR>:
 * Comment:
 * 	Perform a yield from an ISR
 *
 **********************************************************/
void ROSA_yieldFromISR(void)
{
80000354:	eb cd 40 80 	pushm	r7,lr
80000358:	1a 97       	mov	r7,sp
	contextSaveFromISR();	  //Save the task context
8000035a:	f0 1f 00 05 	mcall	8000036c <ROSA_yieldFromISR+0x18>
	scheduler();			  //Find next task to execute
8000035e:	f0 1f 00 05 	mcall	80000370 <ROSA_yieldFromISR+0x1c>
	contextRestoreFromISR();  //...and switch over to it.
80000362:	f0 1f 00 05 	mcall	80000374 <ROSA_yieldFromISR+0x20>
}
80000366:	e3 cd 80 80 	ldm	sp++,r7,pc
8000036a:	00 00       	add	r0,r0
8000036c:	80 00       	ld.sh	r0,r0[0x0]
8000036e:	11 7e       	ld.ub	lr,--r8
80000370:	80 00       	ld.sh	r0,r0[0x0]
80000372:	03 e8       	ld.ub	r8,r1[0x6]
80000374:	80 00       	ld.sh	r0,r0[0x0]
80000376:	11 b8       	ld.ub	r8,r8[0x3]

80000378 <usart_options>:
80000378:	00 00 e1 00 08 04 00 00 00 00 00 00                 ............

80000384 <ROSA_init>:
 * Comment:
 * 	Initialize the ROSA system
 *
 **********************************************************/
void ROSA_init(void)
{
80000384:	eb cd 40 80 	pushm	r7,lr
80000388:	1a 97       	mov	r7,sp
	//Do initialization of I/O drivers
	ledInit();									//LEDs
8000038a:	f0 1f 00 0f 	mcall	800003c4 <ROSA_init+0x40>
	buttonInit();								//Buttons
8000038e:	f0 1f 00 0f 	mcall	800003c8 <ROSA_init+0x44>
	joystickInit();								//Joystick
80000392:	f0 1f 00 0f 	mcall	800003cc <ROSA_init+0x48>
	potInit();									//Potentiometer
80000396:	f0 1f 00 0f 	mcall	800003d0 <ROSA_init+0x4c>
	usartInit(USART, &usart_options, FOSC0);	//Serial communication
8000039a:	e0 6a 1b 00 	mov	r10,6912
8000039e:	ea 1a 00 b7 	orh	r10,0xb7
800003a2:	48 db       	lddpc	r11,800003d4 <ROSA_init+0x50>
800003a4:	fe 7c 14 00 	mov	r12,-60416
800003a8:	f0 1f 00 0c 	mcall	800003d8 <ROSA_init+0x54>

	//Start with empty TCBLIST and no EXECTASK.
	TCBLIST = NULL;
800003ac:	48 c8       	lddpc	r8,800003dc <ROSA_init+0x58>
800003ae:	30 09       	mov	r9,0
800003b0:	91 09       	st.w	r8[0x0],r9
	EXECTASK = NULL;
800003b2:	48 c8       	lddpc	r8,800003e0 <ROSA_init+0x5c>
800003b4:	30 09       	mov	r9,0
800003b6:	91 09       	st.w	r8[0x0],r9

	//Initialize the timer to 100 ms period.
	//...
	timerInit(100);
800003b8:	36 4c       	mov	r12,100
800003ba:	f0 1f 00 0b 	mcall	800003e4 <ROSA_init+0x60>
	//...
}
800003be:	e3 cd 80 80 	ldm	sp++,r7,pc
800003c2:	00 00       	add	r0,r0
800003c4:	80 00       	ld.sh	r0,r0[0x0]
800003c6:	06 94       	mov	r4,r3
800003c8:	80 00       	ld.sh	r0,r0[0x0]
800003ca:	04 ec       	st.h	--r2,r12
800003cc:	80 00       	ld.sh	r0,r0[0x0]
800003ce:	05 14       	ld.sh	r4,r2++
800003d0:	80 00       	ld.sh	r0,r0[0x0]
800003d2:	07 40       	ld.w	r0,--r3
800003d4:	80 00       	ld.sh	r0,r0[0x0]
800003d6:	03 78       	ld.ub	r8,--r1
800003d8:	80 00       	ld.sh	r0,r0[0x0]
800003da:	08 f4       	st.b	--r4,r4
800003dc:	00 00       	add	r0,r0
800003de:	01 1c       	ld.sh	r12,r0++
800003e0:	00 00       	add	r0,r0
800003e2:	01 20       	ld.uh	r0,r0++
800003e4:	80 00       	ld.sh	r0,r0[0x0]
800003e6:	0b a0       	ld.ub	r0,r5[0x2]

800003e8 <scheduler>:
 * 	Minimalistic scheduler for round robin task switch.
 * 	This scheduler choose the next task to execute by looking
 * 	at the nexttcb of the current running task.
 **********************************************************/
void scheduler(void)
{
800003e8:	eb cd 40 80 	pushm	r7,lr
800003ec:	1a 97       	mov	r7,sp
	//Find the next task to execute
	EXECTASK = EXECTASK->nexttcb;
800003ee:	48 48       	lddpc	r8,800003fc <scheduler+0x14>
800003f0:	70 08       	ld.w	r8,r8[0x0]
800003f2:	70 09       	ld.w	r9,r8[0x0]
800003f4:	48 28       	lddpc	r8,800003fc <scheduler+0x14>
800003f6:	91 09       	st.w	r8[0x0],r9
}
800003f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800003fc:	00 00       	add	r0,r0
800003fe:	01 20       	ld.uh	r0,r0++

80000400 <C.0.9417>:
80000400:	00 00 00 02 00 00 00 08 00 00 00 20 00 00 00 80     ........... ....

80000410 <timerISR>:
 * Comment:
 * 	This is the basic timer interrupt service routine.
 **********************************************************/
__attribute__((__interrupt__))
void timerISR(void)
{
80000410:	eb cd 40 80 	pushm	r7,lr
80000414:	1a 97       	mov	r7,sp
80000416:	20 2d       	sub	sp,8
	int sr;
	volatile avr32_tc_t * tc = &AVR32_TC;
80000418:	fe 78 38 00 	mov	r8,-51200
8000041c:	ef 48 ff fc 	st.w	r7[-4],r8

	//Read the timer status register to determine if this is a valid interrupt
	sr = tc->channel[0].sr;
80000420:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000424:	70 88       	ld.w	r8,r8[0x20]
80000426:	ef 48 ff f8 	st.w	r7[-8],r8
	if(sr & AVR32_TC_CPCS_MASK)
8000042a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000042e:	e2 18 00 10 	andl	r8,0x10,COH
80000432:	c0 30       	breq	80000438 <timerISR+0x28>
		ROSA_yieldFromISR();
80000434:	f0 1f 00 03 	mcall	80000440 <timerISR+0x30>
}
80000438:	2f ed       	sub	sp,-8
8000043a:	e3 cd 40 80 	ldm	sp++,r7,lr
8000043e:	d6 03       	rete
80000440:	80 00       	ld.sh	r0,r0[0x0]
80000442:	03 54       	ld.sh	r4,--r1

80000444 <timerPeriodSet>:
 * Comment:
 * 	Set the timer period to 'ms' milliseconds.
 *
 **********************************************************/
int timerPeriodSet(unsigned int ms)
{
80000444:	eb cd 40 80 	pushm	r7,lr
80000448:	1a 97       	mov	r7,sp
8000044a:	20 7d       	sub	sp,28
8000044c:	ef 4c ff e4 	st.w	r7[-28],r12

	int rc, prescale;
	int f[] = { 2, 8, 32, 128 };
80000450:	4a 48       	lddpc	r8,800004e0 <timerPeriodSet+0x9c>
80000452:	ee ca 00 18 	sub	r10,r7,24
80000456:	10 9b       	mov	r11,r8
80000458:	f6 e8 00 00 	ld.d	r8,r11[0]
8000045c:	f4 e9 00 00 	st.d	r10[0],r8
80000460:	f6 e8 00 08 	ld.d	r8,r11[8]
80000464:	f4 e9 00 08 	st.d	r10[8],r8
	//FOSC0 / factor_prescale * time[s];
	prescale = AVR32_TC_CMR0_TCCLKS_TIMER_CLOCK5;
80000468:	30 48       	mov	r8,4
8000046a:	ef 48 ff fc 	st.w	r7[-4],r8
	rc = FOSC0 / f[prescale - 1] * ms / 1000;
8000046e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000472:	20 18       	sub	r8,1
80000474:	a3 68       	lsl	r8,0x2
80000476:	ee 08 00 08 	add	r8,r7,r8
8000047a:	f0 f9 ff e8 	ld.w	r9,r8[-24]
8000047e:	e0 68 1b 00 	mov	r8,6912
80000482:	ea 18 00 b7 	orh	r8,0xb7
80000486:	f0 09 0c 08 	divs	r8,r8,r9
8000048a:	10 99       	mov	r9,r8
8000048c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000490:	b1 39       	mul	r9,r8
80000492:	e0 68 4d d3 	mov	r8,19923
80000496:	ea 18 10 62 	orh	r8,0x1062
8000049a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000049e:	f2 08 16 06 	lsr	r8,r9,0x6
800004a2:	ef 48 ff f8 	st.w	r7[-8],r8
	timerPrescaleSet(prescale);
800004a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800004aa:	f0 1f 00 0f 	mcall	800004e4 <timerPeriodSet+0xa0>
	timerRCSet(rc);
800004ae:	ee fc ff f8 	ld.w	r12,r7[-8]
800004b2:	f0 1f 00 0e 	mcall	800004e8 <timerPeriodSet+0xa4>
	return rc * prescale / FOSC0;
800004b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800004ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800004be:	f2 08 02 4a 	mul	r10,r9,r8
800004c2:	e0 68 9f 81 	mov	r8,40833
800004c6:	ea 18 16 5e 	orh	r8,0x165e
800004ca:	f4 08 04 48 	muls.d	r8,r10,r8
800004ce:	b5 49       	asr	r9,0x14
800004d0:	f4 08 14 1f 	asr	r8,r10,0x1f
800004d4:	f2 08 01 08 	sub	r8,r9,r8
}
800004d8:	10 9c       	mov	r12,r8
800004da:	2f 9d       	sub	sp,-28
800004dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800004e0:	80 00       	ld.sh	r0,r0[0x0]
800004e2:	04 00       	add	r0,r2
800004e4:	80 00       	ld.sh	r0,r0[0x0]
800004e6:	0c 14       	sub	r4,r6
800004e8:	80 00       	ld.sh	r0,r0[0x0]
800004ea:	0b fe       	ld.ub	lr,r5[0x7]

800004ec <buttonInit>:
800004ec:	eb cd 40 80 	pushm	r7,lr
800004f0:	1a 97       	mov	r7,sp
800004f2:	30 1b       	mov	r11,1
800004f4:	35 8c       	mov	r12,88
800004f6:	f0 1f 00 07 	mcall	80000510 <buttonInit+0x24>
800004fa:	30 1b       	mov	r11,1
800004fc:	35 5c       	mov	r12,85
800004fe:	f0 1f 00 05 	mcall	80000510 <buttonInit+0x24>
80000502:	30 1b       	mov	r11,1
80000504:	35 2c       	mov	r12,82
80000506:	f0 1f 00 03 	mcall	80000510 <buttonInit+0x24>
8000050a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000050e:	00 00       	add	r0,r0
80000510:	80 00       	ld.sh	r0,r0[0x0]
80000512:	05 4c       	ld.w	r12,--r2

80000514 <joystickInit>:
80000514:	eb cd 40 80 	pushm	r7,lr
80000518:	1a 97       	mov	r7,sp
8000051a:	30 1b       	mov	r11,1
8000051c:	31 bc       	mov	r12,27
8000051e:	f0 1f 00 0b 	mcall	80000548 <joystickInit+0x34>
80000522:	30 1b       	mov	r11,1
80000524:	31 9c       	mov	r12,25
80000526:	f0 1f 00 09 	mcall	80000548 <joystickInit+0x34>
8000052a:	30 1b       	mov	r11,1
8000052c:	31 cc       	mov	r12,28
8000052e:	f0 1f 00 07 	mcall	80000548 <joystickInit+0x34>
80000532:	30 1b       	mov	r11,1
80000534:	31 4c       	mov	r12,20
80000536:	f0 1f 00 05 	mcall	80000548 <joystickInit+0x34>
8000053a:	30 1b       	mov	r11,1
8000053c:	31 ac       	mov	r12,26
8000053e:	f0 1f 00 03 	mcall	80000548 <joystickInit+0x34>
80000542:	e3 cd 80 80 	ldm	sp++,r7,pc
80000546:	00 00       	add	r0,r0
80000548:	80 00       	ld.sh	r0,r0[0x0]
8000054a:	05 4c       	ld.w	r12,--r2

8000054c <gpioInit>:
8000054c:	eb cd 40 80 	pushm	r7,lr
80000550:	1a 97       	mov	r7,sp
80000552:	20 7d       	sub	sp,28
80000554:	ef 4c ff ec 	st.w	r7[-20],r12
80000558:	ef 4b ff e8 	st.w	r7[-24],r11
8000055c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000560:	a5 58       	asr	r8,0x5
80000562:	ef 48 ff f4 	st.w	r7[-12],r8
80000566:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000056a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000056e:	ef 48 ff fc 	st.w	r7[-4],r8
80000572:	30 19       	mov	r9,1
80000574:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000578:	f2 08 09 48 	lsl	r8,r9,r8
8000057c:	ef 48 ff f8 	st.w	r7[-8],r8
80000580:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000584:	a9 68       	lsl	r8,0x8
80000586:	e0 28 f0 00 	sub	r8,61440
8000058a:	ef 48 ff f0 	st.w	r7[-16],r8
8000058e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000592:	ee f8 ff f0 	ld.w	r8,r7[-16]
80000596:	91 19       	st.w	r8[0x4],r9
80000598:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000059c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005a0:	91 69       	st.w	r8[0x18],r9
800005a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005aa:	91 a9       	st.w	r8[0x28],r9
800005ac:	ee f8 ff e8 	ld.w	r8,r7[-24]
800005b0:	ef 48 ff e4 	st.w	r7[-28],r8
800005b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800005b8:	58 08       	cp.w	r8,0
800005ba:	c0 60       	breq	800005c6 <gpioInit+0x7a>
800005bc:	ee f8 ff e4 	ld.w	r8,r7[-28]
800005c0:	58 18       	cp.w	r8,1
800005c2:	c0 90       	breq	800005d4 <gpioInit+0x88>
800005c4:	c0 f8       	rjmp	800005e2 <gpioInit+0x96>
800005c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005ce:	f1 49 00 44 	st.w	r8[68],r9
800005d2:	c0 e8       	rjmp	800005ee <gpioInit+0xa2>
800005d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005dc:	f1 49 00 48 	st.w	r8[72],r9
800005e0:	c0 78       	rjmp	800005ee <gpioInit+0xa2>
800005e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800005e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800005ea:	f1 49 00 48 	st.w	r8[72],r9
800005ee:	2f 9d       	sub	sp,-28
800005f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800005f4 <gpioClear>:
800005f4:	eb cd 40 80 	pushm	r7,lr
800005f8:	1a 97       	mov	r7,sp
800005fa:	20 5d       	sub	sp,20
800005fc:	ef 4c ff ec 	st.w	r7[-20],r12
80000600:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000604:	a5 58       	asr	r8,0x5
80000606:	ef 48 ff f4 	st.w	r7[-12],r8
8000060a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000060e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000612:	ef 48 ff fc 	st.w	r7[-4],r8
80000616:	30 19       	mov	r9,1
80000618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000061c:	f2 08 09 48 	lsl	r8,r9,r8
80000620:	ef 48 ff f8 	st.w	r7[-8],r8
80000624:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000628:	a9 68       	lsl	r8,0x8
8000062a:	e0 28 f0 00 	sub	r8,61440
8000062e:	ef 48 ff f0 	st.w	r7[-16],r8
80000632:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000636:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000063a:	f1 49 00 58 	st.w	r8[88],r9
8000063e:	2f bd       	sub	sp,-20
80000640:	e3 cd 80 80 	ldm	sp++,r7,pc

80000644 <gpioSet>:
80000644:	eb cd 40 80 	pushm	r7,lr
80000648:	1a 97       	mov	r7,sp
8000064a:	20 5d       	sub	sp,20
8000064c:	ef 4c ff ec 	st.w	r7[-20],r12
80000650:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000654:	a5 58       	asr	r8,0x5
80000656:	ef 48 ff f4 	st.w	r7[-12],r8
8000065a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000065e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80000662:	ef 48 ff fc 	st.w	r7[-4],r8
80000666:	30 19       	mov	r9,1
80000668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000066c:	f2 08 09 48 	lsl	r8,r9,r8
80000670:	ef 48 ff f8 	st.w	r7[-8],r8
80000674:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000678:	a9 68       	lsl	r8,0x8
8000067a:	e0 28 f0 00 	sub	r8,61440
8000067e:	ef 48 ff f0 	st.w	r7[-16],r8
80000682:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000686:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000068a:	f1 49 00 54 	st.w	r8[84],r9
8000068e:	2f bd       	sub	sp,-20
80000690:	e3 cd 80 80 	ldm	sp++,r7,pc

80000694 <ledInit>:
80000694:	eb cd 40 80 	pushm	r7,lr
80000698:	1a 97       	mov	r7,sp
8000069a:	20 9d       	sub	sp,36
8000069c:	49 e8       	lddpc	r8,80000714 <ledInit+0x80>
8000069e:	ee cb 00 24 	sub	r11,r7,36
800006a2:	10 9a       	mov	r10,r8
800006a4:	f4 e8 00 00 	ld.d	r8,r10[0]
800006a8:	f6 e9 00 00 	st.d	r11[0],r8
800006ac:	f4 e8 00 08 	ld.d	r8,r10[8]
800006b0:	f6 e9 00 08 	st.d	r11[8],r8
800006b4:	f4 e8 00 10 	ld.d	r8,r10[16]
800006b8:	f6 e9 00 10 	st.d	r11[16],r8
800006bc:	f4 e8 00 18 	ld.d	r8,r10[24]
800006c0:	f6 e9 00 18 	st.d	r11[24],r8
800006c4:	30 08       	mov	r8,0
800006c6:	ef 48 ff fc 	st.w	r7[-4],r8
800006ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006ce:	a3 68       	lsl	r8,0x2
800006d0:	ee 08 00 08 	add	r8,r7,r8
800006d4:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800006d8:	10 9c       	mov	r12,r8
800006da:	f0 1f 00 10 	mcall	80000718 <ledInit+0x84>
800006de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006e2:	a3 68       	lsl	r8,0x2
800006e4:	ee 08 00 08 	add	r8,r7,r8
800006e8:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800006ec:	30 0b       	mov	r11,0
800006ee:	10 9c       	mov	r12,r8
800006f0:	f0 1f 00 0b 	mcall	8000071c <ledInit+0x88>
800006f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800006f8:	58 78       	cp.w	r8,7
800006fa:	5f 18       	srne	r8
800006fc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000700:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000704:	2f f8       	sub	r8,-1
80000706:	ef 48 ff fc 	st.w	r7[-4],r8
8000070a:	58 09       	cp.w	r9,0
8000070c:	cd f1       	brne	800006ca <ledInit+0x36>
8000070e:	2f 7d       	sub	sp,-36
80000710:	e3 cd 80 80 	ldm	sp++,r7,pc
80000714:	80 00       	ld.sh	r0,r0[0x0]
80000716:	14 00       	add	r0,r10
80000718:	80 00       	ld.sh	r0,r0[0x0]
8000071a:	07 20       	ld.uh	r0,r3++
8000071c:	80 00       	ld.sh	r0,r0[0x0]
8000071e:	05 4c       	ld.w	r12,--r2

80000720 <ledOff>:
80000720:	eb cd 40 80 	pushm	r7,lr
80000724:	1a 97       	mov	r7,sp
80000726:	20 1d       	sub	sp,4
80000728:	ef 4c ff fc 	st.w	r7[-4],r12
8000072c:	ee fc ff fc 	ld.w	r12,r7[-4]
80000730:	f0 1f 00 03 	mcall	8000073c <ledOff+0x1c>
80000734:	2f fd       	sub	sp,-4
80000736:	e3 cd 80 80 	ldm	sp++,r7,pc
8000073a:	00 00       	add	r0,r0
8000073c:	80 00       	ld.sh	r0,r0[0x0]
8000073e:	06 44       	or	r4,r3

80000740 <potInit>:
80000740:	d3 01       	pushm	r11-r12
80000742:	e0 6c 10 00 	mov	r12,4096
80000746:	ea 1c ff ff 	orh	r12,0xffff
8000074a:	31 6b       	mov	r11,22
8000074c:	99 2b       	st.w	r12[0x8],r11
8000074e:	99 6b       	st.w	r12[0x18],r11
80000750:	99 6b       	st.w	r12[0x18],r11
80000752:	e0 6c 3c 00 	mov	r12,15360
80000756:	ea 1c ff ff 	orh	r12,0xffff
8000075a:	30 1b       	mov	r11,1
8000075c:	99 0b       	st.w	r12[0x0],r11
8000075e:	e0 6b 0f 1f 	mov	r11,3871
80000762:	b1 6b       	lsl	r11,0x10
80000764:	99 1b       	st.w	r12[0x4],r11
80000766:	30 2b       	mov	r11,2
80000768:	99 4b       	st.w	r12[0x10],r11
8000076a:	d3 02       	popm	r11-r12
8000076c:	1c 9f       	mov	pc,lr

8000076e <potGetValue>:
8000076e:	d1 81       	pushm	r10-r11
80000770:	e0 6c 3c 00 	mov	r12,15360
80000774:	ea 1c ff ff 	orh	r12,0xffff
80000778:	30 2b       	mov	r11,2
8000077a:	99 0b       	st.w	r12[0x0],r11

8000077c <a1>:
8000077c:	78 7a       	ld.w	r10,r12[0x1c]
8000077e:	16 7a       	tst	r10,r11
80000780:	cf e0       	breq	8000077c <a1>
80000782:	78 dc       	ld.w	r12,r12[0x34]
80000784:	d1 82       	popm	r10-r11
80000786:	1c 9f       	mov	pc,lr

80000788 <usartReset>:
80000788:	eb cd 40 80 	pushm	r7,lr
8000078c:	1a 97       	mov	r7,sp
8000078e:	20 3d       	sub	sp,12
80000790:	ef 4c ff f8 	st.w	r7[-8],r12
80000794:	f0 1f 00 16 	mcall	800007ec <usartReset+0x64>
80000798:	18 98       	mov	r8,r12
8000079a:	ef 48 ff fc 	st.w	r7[-4],r8
8000079e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007a2:	58 08       	cp.w	r8,0
800007a4:	c0 30       	breq	800007aa <usartReset+0x22>
800007a6:	f0 1f 00 13 	mcall	800007f0 <usartReset+0x68>
800007aa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007ae:	3f f8       	mov	r8,-1
800007b0:	93 38       	st.w	r9[0xc],r8
800007b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800007b6:	70 58       	ld.w	r8,r8[0x14]
800007b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800007bc:	58 08       	cp.w	r8,0
800007be:	c0 30       	breq	800007c4 <usartReset+0x3c>
800007c0:	f0 1f 00 0d 	mcall	800007f4 <usartReset+0x6c>
800007c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007c8:	30 08       	mov	r8,0
800007ca:	93 18       	st.w	r9[0x4],r8
800007cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007d0:	30 08       	mov	r8,0
800007d2:	93 98       	st.w	r9[0x24],r8
800007d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007d8:	30 08       	mov	r8,0
800007da:	93 a8       	st.w	r9[0x28],r8
800007dc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800007e0:	ea 68 61 0c 	mov	r8,680204
800007e4:	93 08       	st.w	r9[0x0],r8
800007e6:	2f dd       	sub	sp,-12
800007e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800007ec:	80 00       	ld.sh	r0,r0[0x0]
800007ee:	11 6e       	ld.uh	lr,--r8
800007f0:	80 00       	ld.sh	r0,r0[0x0]
800007f2:	11 66       	ld.uh	r6,--r8
800007f4:	80 00       	ld.sh	r0,r0[0x0]
800007f6:	11 6a       	ld.uh	r10,--r8

800007f8 <usartSetBaudrate>:
800007f8:	eb cd 40 80 	pushm	r7,lr
800007fc:	1a 97       	mov	r7,sp
800007fe:	20 bd       	sub	sp,44
80000800:	ef 4c ff ec 	st.w	r7[-20],r12
80000804:	ef 4b ff e8 	st.w	r7[-24],r11
80000808:	ef 4a ff e4 	st.w	r7[-28],r10
8000080c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000810:	f0 09 15 04 	lsl	r9,r8,0x4
80000814:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000818:	10 39       	cp.w	r9,r8
8000081a:	e0 8b 00 06 	brhi	80000826 <usartSetBaudrate+0x2e>
8000081e:	31 09       	mov	r9,16
80000820:	ef 49 ff d4 	st.w	r7[-44],r9
80000824:	c0 48       	rjmp	8000082c <usartSetBaudrate+0x34>
80000826:	30 88       	mov	r8,8
80000828:	ef 48 ff d4 	st.w	r7[-44],r8
8000082c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80000830:	ef 49 ff f0 	st.w	r7[-16],r9
80000834:	ee f8 ff e4 	ld.w	r8,r7[-28]
80000838:	f0 0a 15 03 	lsl	r10,r8,0x3
8000083c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000840:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000844:	f2 08 02 48 	mul	r8,r9,r8
80000848:	a1 98       	lsr	r8,0x1
8000084a:	10 0a       	add	r10,r8
8000084c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80000850:	ee f8 ff e8 	ld.w	r8,r7[-24]
80000854:	f2 08 02 48 	mul	r8,r9,r8
80000858:	f4 08 0d 08 	divu	r8,r10,r8
8000085c:	ef 48 ff f4 	st.w	r7[-12],r8
80000860:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000864:	a3 98       	lsr	r8,0x3
80000866:	ef 48 ff f8 	st.w	r7[-8],r8
8000086a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000086e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80000872:	ef 48 ff fc 	st.w	r7[-4],r8
80000876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000087a:	58 08       	cp.w	r8,0
8000087c:	c0 70       	breq	8000088a <usartSetBaudrate+0x92>
8000087e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000882:	e0 48 ff ff 	cp.w	r8,65535
80000886:	e0 88 00 06 	brls	80000892 <usartSetBaudrate+0x9a>
8000088a:	30 18       	mov	r8,1
8000088c:	ef 48 ff d8 	st.w	r7[-40],r8
80000890:	c2 c8       	rjmp	800008e8 <usartSetBaudrate+0xf0>
80000892:	ee f8 ff ec 	ld.w	r8,r7[-20]
80000896:	70 18       	ld.w	r8,r8[0x4]
80000898:	10 99       	mov	r9,r8
8000089a:	e4 19 ff f7 	andh	r9,0xfff7
8000089e:	e0 19 fe cf 	andl	r9,0xfecf
800008a2:	ef 49 ff dc 	st.w	r7[-36],r9
800008a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800008aa:	59 08       	cp.w	r8,16
800008ac:	c0 60       	breq	800008b8 <usartSetBaudrate+0xc0>
800008ae:	e8 68 00 00 	mov	r8,524288
800008b2:	ef 48 ff e0 	st.w	r7[-32],r8
800008b6:	c0 48       	rjmp	800008be <usartSetBaudrate+0xc6>
800008b8:	30 09       	mov	r9,0
800008ba:	ef 49 ff e0 	st.w	r7[-32],r9
800008be:	ee f9 ff dc 	ld.w	r9,r7[-36]
800008c2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800008c6:	10 49       	or	r9,r8
800008c8:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008cc:	91 19       	st.w	r8[0x4],r9
800008ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800008d2:	f0 09 15 10 	lsl	r9,r8,0x10
800008d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800008da:	10 49       	or	r9,r8
800008dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800008e0:	91 89       	st.w	r8[0x20],r9
800008e2:	30 09       	mov	r9,0
800008e4:	ef 49 ff d8 	st.w	r7[-40],r9
800008e8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800008ec:	10 9c       	mov	r12,r8
800008ee:	2f 5d       	sub	sp,-44
800008f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800008f4 <usartInit>:
800008f4:	eb cd 40 80 	pushm	r7,lr
800008f8:	1a 97       	mov	r7,sp
800008fa:	20 4d       	sub	sp,16
800008fc:	ef 4c ff f8 	st.w	r7[-8],r12
80000900:	ef 4b ff f4 	st.w	r7[-12],r11
80000904:	ef 4a ff f0 	st.w	r7[-16],r10
80000908:	fe 78 10 00 	mov	r8,-61440
8000090c:	ef 48 ff fc 	st.w	r7[-4],r8
80000910:	ee f9 ff fc 	ld.w	r9,r7[-4]
80000914:	30 18       	mov	r8,1
80000916:	93 28       	st.w	r9[0x8],r8
80000918:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000091c:	30 28       	mov	r8,2
8000091e:	93 28       	st.w	r9[0x8],r8
80000920:	ee fc ff f8 	ld.w	r12,r7[-8]
80000924:	f0 1f 00 3b 	mcall	80000a10 <usartInit+0x11c>
80000928:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000092c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000930:	70 08       	ld.w	r8,r8[0x0]
80000932:	12 9a       	mov	r10,r9
80000934:	10 9b       	mov	r11,r8
80000936:	ee fc ff f8 	ld.w	r12,r7[-8]
8000093a:	f0 1f 00 37 	mcall	80000a14 <usartInit+0x120>
8000093e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000942:	11 c9       	ld.ub	r9,r8[0x4]
80000944:	30 98       	mov	r8,9
80000946:	f0 09 18 00 	cp.b	r9,r8
8000094a:	c0 a1       	brne	8000095e <usartInit+0x6a>
8000094c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000950:	70 18       	ld.w	r8,r8[0x4]
80000952:	10 99       	mov	r9,r8
80000954:	b1 b9       	sbr	r9,0x11
80000956:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000095a:	91 19       	st.w	r8[0x4],r9
8000095c:	c0 d8       	rjmp	80000976 <usartInit+0x82>
8000095e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000962:	70 19       	ld.w	r9,r8[0x4]
80000964:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000968:	11 c8       	ld.ub	r8,r8[0x4]
8000096a:	20 58       	sub	r8,5
8000096c:	a7 68       	lsl	r8,0x6
8000096e:	10 49       	or	r9,r8
80000970:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000974:	91 19       	st.w	r8[0x4],r9
80000976:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000097a:	70 1a       	ld.w	r10,r8[0x4]
8000097c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000980:	11 d8       	ld.ub	r8,r8[0x5]
80000982:	f0 09 15 09 	lsl	r9,r8,0x9
80000986:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000098a:	f1 38 00 08 	ld.ub	r8,r8[8]
8000098e:	af 68       	lsl	r8,0xe
80000990:	f3 e8 10 08 	or	r8,r9,r8
80000994:	f5 e8 10 09 	or	r9,r10,r8
80000998:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000099c:	91 19       	st.w	r8[0x4],r9
8000099e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009a2:	90 39       	ld.sh	r9,r8[0x6]
800009a4:	30 28       	mov	r8,2
800009a6:	f0 09 19 00 	cp.h	r9,r8
800009aa:	e0 88 00 14 	brls	800009d2 <usartInit+0xde>
800009ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009b2:	70 18       	ld.w	r8,r8[0x4]
800009b4:	10 99       	mov	r9,r8
800009b6:	ad b9       	sbr	r9,0xd
800009b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009bc:	91 19       	st.w	r8[0x4],r9
800009be:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009c2:	90 38       	ld.sh	r8,r8[0x6]
800009c4:	5c 78       	castu.h	r8
800009c6:	20 28       	sub	r8,2
800009c8:	10 99       	mov	r9,r8
800009ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ce:	91 a9       	st.w	r8[0x28],r9
800009d0:	c0 d8       	rjmp	800009ea <usartInit+0xf6>
800009d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009d6:	70 19       	ld.w	r9,r8[0x4]
800009d8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800009dc:	90 38       	ld.sh	r8,r8[0x6]
800009de:	5c 78       	castu.h	r8
800009e0:	ad 68       	lsl	r8,0xc
800009e2:	10 49       	or	r9,r8
800009e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009e8:	91 19       	st.w	r8[0x4],r9
800009ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009ee:	70 18       	ld.w	r8,r8[0x4]
800009f0:	10 99       	mov	r9,r8
800009f2:	e0 19 ff f0 	andl	r9,0xfff0
800009f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800009fa:	91 19       	st.w	r8[0x4],r9
800009fc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80000a00:	35 08       	mov	r8,80
80000a02:	93 08       	st.w	r9[0x0],r8
80000a04:	30 08       	mov	r8,0
80000a06:	10 9c       	mov	r12,r8
80000a08:	2f cd       	sub	sp,-16
80000a0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a0e:	00 00       	add	r0,r0
80000a10:	80 00       	ld.sh	r0,r0[0x0]
80000a12:	07 88       	ld.ub	r8,r3[0x0]
80000a14:	80 00       	ld.sh	r0,r0[0x0]
80000a16:	07 f8       	ld.ub	r8,r3[0x7]

80000a18 <usartWriteChar>:
80000a18:	eb cd 40 80 	pushm	r7,lr
80000a1c:	1a 97       	mov	r7,sp
80000a1e:	20 3d       	sub	sp,12
80000a20:	ef 4c ff f8 	st.w	r7[-8],r12
80000a24:	16 98       	mov	r8,r11
80000a26:	ef 68 ff f4 	st.b	r7[-12],r8
80000a2a:	e4 68 00 00 	mov	r8,262144
80000a2e:	ef 48 ff fc 	st.w	r7[-4],r8
80000a32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a36:	58 08       	cp.w	r8,0
80000a38:	5f 18       	srne	r8
80000a3a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80000a3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80000a42:	20 18       	sub	r8,1
80000a44:	ef 48 ff fc 	st.w	r7[-4],r8
80000a48:	12 98       	mov	r8,r9
80000a4a:	ec 18 00 01 	eorl	r8,0x1
80000a4e:	5c 58       	castu.b	r8
80000a50:	c0 71       	brne	80000a5e <usartWriteChar+0x46>
80000a52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a56:	70 58       	ld.w	r8,r8[0x14]
80000a58:	e2 18 00 02 	andl	r8,0x2,COH
80000a5c:	ce b0       	breq	80000a32 <usartWriteChar+0x1a>
80000a5e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80000a62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a66:	91 79       	st.w	r8[0x1c],r9
80000a68:	2f dd       	sub	sp,-12
80000a6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80000a6e:	d7 03       	nop

80000a70 <usartWriteLine>:
80000a70:	eb cd 40 80 	pushm	r7,lr
80000a74:	1a 97       	mov	r7,sp
80000a76:	20 2d       	sub	sp,8
80000a78:	ef 4c ff fc 	st.w	r7[-4],r12
80000a7c:	ef 4b ff f8 	st.w	r7[-8],r11
80000a80:	c1 88       	rjmp	80000ab0 <usartWriteLine+0x40>
80000a82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a86:	11 88       	ld.ub	r8,r8[0x0]
80000a88:	58 a8       	cp.w	r8,10
80000a8a:	c0 61       	brne	80000a96 <usartWriteLine+0x26>
80000a8c:	30 db       	mov	r11,13
80000a8e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000a92:	f0 1f 00 0c 	mcall	80000ac0 <usartWriteLine+0x50>
80000a96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000a9a:	11 88       	ld.ub	r8,r8[0x0]
80000a9c:	10 9b       	mov	r11,r8
80000a9e:	ee fc ff fc 	ld.w	r12,r7[-4]
80000aa2:	f0 1f 00 08 	mcall	80000ac0 <usartWriteLine+0x50>
80000aa6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000aaa:	2f f8       	sub	r8,-1
80000aac:	ef 48 ff f8 	st.w	r7[-8],r8
80000ab0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ab4:	11 88       	ld.ub	r8,r8[0x0]
80000ab6:	58 08       	cp.w	r8,0
80000ab8:	ce 51       	brne	80000a82 <usartWriteLine+0x12>
80000aba:	2f ed       	sub	sp,-8
80000abc:	e3 cd 80 80 	ldm	sp++,r7,pc
80000ac0:	80 00       	ld.sh	r0,r0[0x0]
80000ac2:	0a 18       	sub	r8,r5

80000ac4 <usartGetChar>:
80000ac4:	eb cd 40 80 	pushm	r7,lr
80000ac8:	1a 97       	mov	r7,sp
80000aca:	20 3d       	sub	sp,12
80000acc:	ef 4c ff f8 	st.w	r7[-8],r12
80000ad0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ad4:	70 58       	ld.w	r8,r8[0x14]
80000ad6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80000ada:	c0 51       	brne	80000ae4 <usartGetChar+0x20>
80000adc:	30 08       	mov	r8,0
80000ade:	ef 48 ff f4 	st.w	r7[-12],r8
80000ae2:	c0 a8       	rjmp	80000af6 <usartGetChar+0x32>
80000ae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80000ae8:	70 68       	ld.w	r8,r8[0x18]
80000aea:	ef 68 ff ff 	st.b	r7[-1],r8
80000aee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80000af2:	ef 48 ff f4 	st.w	r7[-12],r8
80000af6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000afa:	10 9c       	mov	r12,r8
80000afc:	2f dd       	sub	sp,-12
80000afe:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b02:	d7 03       	nop

80000b04 <usartGetLine>:
80000b04:	eb cd 40 80 	pushm	r7,lr
80000b08:	1a 97       	mov	r7,sp
80000b0a:	20 3d       	sub	sp,12
80000b0c:	ef 4c ff f8 	st.w	r7[-8],r12
80000b10:	ef 4b ff f4 	st.w	r7[-12],r11
80000b14:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b18:	f0 1f 00 20 	mcall	80000b98 <usartGetLine+0x94>
80000b1c:	18 98       	mov	r8,r12
80000b1e:	ef 68 ff ff 	st.b	r7[-1],r8
80000b22:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000b26:	30 08       	mov	r8,0
80000b28:	f0 09 18 00 	cp.b	r9,r8
80000b2c:	cf 40       	breq	80000b14 <usartGetLine+0x10>
80000b2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000b32:	30 88       	mov	r8,8
80000b34:	f0 09 18 00 	cp.b	r9,r8
80000b38:	c0 71       	brne	80000b46 <usartGetLine+0x42>
80000b3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b3e:	20 18       	sub	r8,1
80000b40:	ef 48 ff f4 	st.w	r7[-12],r8
80000b44:	c0 b8       	rjmp	80000b5a <usartGetLine+0x56>
80000b46:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b4a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80000b4e:	b2 88       	st.b	r9[0x0],r8
80000b50:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b54:	2f f8       	sub	r8,-1
80000b56:	ef 48 ff f4 	st.w	r7[-12],r8
80000b5a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80000b5e:	10 9b       	mov	r11,r8
80000b60:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b64:	f0 1f 00 0e 	mcall	80000b9c <usartGetLine+0x98>
80000b68:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80000b6c:	30 d8       	mov	r8,13
80000b6e:	f0 09 18 00 	cp.b	r9,r8
80000b72:	cd 11       	brne	80000b14 <usartGetLine+0x10>
80000b74:	30 ab       	mov	r11,10
80000b76:	ee fc ff f8 	ld.w	r12,r7[-8]
80000b7a:	f0 1f 00 09 	mcall	80000b9c <usartGetLine+0x98>
80000b7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80000b82:	20 18       	sub	r8,1
80000b84:	ef 48 ff f4 	st.w	r7[-12],r8
80000b88:	ee f9 ff f4 	ld.w	r9,r7[-12]
80000b8c:	30 08       	mov	r8,0
80000b8e:	b2 88       	st.b	r9[0x0],r8
80000b90:	2f dd       	sub	sp,-12
80000b92:	e3 cd 80 80 	ldm	sp++,r7,pc
80000b96:	00 00       	add	r0,r0
80000b98:	80 00       	ld.sh	r0,r0[0x0]
80000b9a:	0a c4       	st.b	r5++,r4
80000b9c:	80 00       	ld.sh	r0,r0[0x0]
80000b9e:	0a 18       	sub	r8,r5

80000ba0 <timerInit>:
80000ba0:	d5 01       	pushm	r11,lr
80000ba2:	d2 01       	pushm	r12
80000ba4:	f0 1f 00 28 	mcall	80000c44 <timerClearInterrupt+0x10>
80000ba8:	f0 1f 00 28 	mcall	80000c48 <timerClearInterrupt+0x14>
80000bac:	e0 6c 38 00 	mov	r12,14336
80000bb0:	ea 1c ff ff 	orh	r12,0xffff
80000bb4:	e0 6b c0 00 	mov	r11,49152
80000bb8:	ea 1b 00 00 	orh	r11,0x0
80000bbc:	99 1b       	st.w	r12[0x4],r11
80000bbe:	30 1b       	mov	r11,1
80000bc0:	a5 6b       	lsl	r11,0x4
80000bc2:	99 9b       	st.w	r12[0x24],r11
80000bc4:	d2 02       	popm	r12
80000bc6:	f0 1f 00 22 	mcall	80000c4c <timerClearInterrupt+0x18>
80000bca:	d5 02       	popm	r11,lr
80000bcc:	1c 9f       	mov	pc,lr

80000bce <timerReset>:
80000bce:	d3 01       	pushm	r11-r12
80000bd0:	e0 6c 38 00 	mov	r12,14336
80000bd4:	ea 1c ff ff 	orh	r12,0xffff
80000bd8:	30 5b       	mov	r11,5
80000bda:	99 0b       	st.w	r12[0x0],r11
80000bdc:	e0 6b 00 14 	mov	r11,20
80000be0:	ea 1b 00 00 	orh	r11,0x0
80000be4:	76 0b       	ld.w	r11,r11[0x0]
80000be6:	99 7b       	st.w	r12[0x1c],r11
80000be8:	d3 02       	popm	r11-r12
80000bea:	1c 9f       	mov	pc,lr

80000bec <timerStop>:
80000bec:	d3 01       	pushm	r11-r12
80000bee:	e0 6c 38 00 	mov	r12,14336
80000bf2:	ea 1c ff ff 	orh	r12,0xffff
80000bf6:	30 2b       	mov	r11,2
80000bf8:	99 0b       	st.w	r12[0x0],r11
80000bfa:	d3 02       	popm	r11-r12
80000bfc:	1c 9f       	mov	pc,lr

80000bfe <timerRCSet>:
80000bfe:	d3 01       	pushm	r11-r12
80000c00:	49 4b       	lddpc	r11,80000c50 <timerClearInterrupt+0x1c>
80000c02:	97 0c       	st.w	r11[0x0],r12
80000c04:	e0 6c 38 00 	mov	r12,14336
80000c08:	ea 1c ff ff 	orh	r12,0xffff
80000c0c:	76 0b       	ld.w	r11,r11[0x0]
80000c0e:	99 7b       	st.w	r12[0x1c],r11
80000c10:	d3 02       	popm	r11-r12
80000c12:	1c 9f       	mov	pc,lr

80000c14 <timerPrescaleSet>:
80000c14:	d3 81       	pushm	r10-r12
80000c16:	49 0b       	lddpc	r11,80000c54 <timerClearInterrupt+0x20>
80000c18:	97 0c       	st.w	r11[0x0],r12
80000c1a:	e0 6c 38 00 	mov	r12,14336
80000c1e:	ea 1c ff ff 	orh	r12,0xffff
80000c22:	78 1a       	ld.w	r10,r12[0x4]
80000c24:	3f 8b       	mov	r11,-8
80000c26:	16 6a       	and	r10,r11
80000c28:	48 bb       	lddpc	r11,80000c54 <timerClearInterrupt+0x20>
80000c2a:	76 0b       	ld.w	r11,r11[0x0]
80000c2c:	14 4b       	or	r11,r10
80000c2e:	99 1b       	st.w	r12[0x4],r11
80000c30:	d3 82       	popm	r10-r12
80000c32:	1c 9f       	mov	pc,lr

80000c34 <timerClearInterrupt>:
80000c34:	d2 01       	pushm	r12
80000c36:	e0 6c 38 00 	mov	r12,14336
80000c3a:	ea 1c ff ff 	orh	r12,0xffff
80000c3e:	78 8c       	ld.w	r12,r12[0x20]
80000c40:	d2 02       	popm	r12
80000c42:	1c 9f       	mov	pc,lr
80000c44:	80 00       	ld.sh	r0,r0[0x0]
80000c46:	11 66       	ld.uh	r6,--r8
80000c48:	80 00       	ld.sh	r0,r0[0x0]
80000c4a:	0c 34       	cp.w	r4,r6
80000c4c:	80 00       	ld.sh	r0,r0[0x0]
80000c4e:	04 44       	or	r4,r2
80000c50:	00 00       	add	r0,r0
80000c52:	00 14       	sub	r4,r0
80000c54:	00 00       	add	r0,r0
80000c56:	00 18       	sub	r8,r0

80000c58 <_stext>:
80000c58:	49 7d       	lddpc	sp,80000cb4 <udata_end+0x4>
80000c5a:	49 80       	lddpc	r0,80000cb8 <udata_end+0x8>
80000c5c:	1a d0       	st.w	--sp,r0
80000c5e:	e5 cd 20 00 	ldmts	sp,sp
80000c62:	1b 00       	ld.w	r0,sp++
80000c64:	49 60       	lddpc	r0,80000cbc <udata_end+0xc>
80000c66:	e3 b0 00 01 	mtsr	0x4,r0
80000c6a:	d5 53       	csrf	0x15
80000c6c:	e0 6c 0c 00 	mov	r12,3072
80000c70:	ea 1c ff ff 	orh	r12,0xffff
80000c74:	e0 6b 01 07 	mov	r11,263
80000c78:	99 ab       	st.w	r12[0x28],r11
80000c7a:	30 4b       	mov	r11,4
80000c7c:	99 0b       	st.w	r12[0x0],r11
80000c7e:	e0 6a 00 80 	mov	r10,128

80000c82 <xw8>:
80000c82:	79 5b       	ld.w	r11,r12[0x54]
80000c84:	14 7b       	tst	r11,r10
80000c86:	cf e0       	breq	80000c82 <xw8>
80000c88:	30 5b       	mov	r11,5
80000c8a:	99 0b       	st.w	r12[0x0],r11

80000c8c <idata_>:
80000c8c:	48 d0       	lddpc	r0,80000cc0 <udata_end+0x10>
80000c8e:	48 e1       	lddpc	r1,80000cc4 <udata_end+0x14>
80000c90:	02 30       	cp.w	r0,r1
80000c92:	c0 62       	brcc	80000c9e <idata_end>
80000c94:	48 d2       	lddpc	r2,80000cc8 <udata_end+0x18>

80000c96 <idata_loop>:
80000c96:	05 04       	ld.w	r4,r2++
80000c98:	00 a4       	st.w	r0++,r4
80000c9a:	02 30       	cp.w	r0,r1
80000c9c:	cf d3       	brcs	80000c96 <idata_loop>

80000c9e <idata_end>:
80000c9e:	48 c0       	lddpc	r0,80000ccc <udata_end+0x1c>
80000ca0:	48 c1       	lddpc	r1,80000cd0 <udata_end+0x20>
80000ca2:	02 30       	cp.w	r0,r1
80000ca4:	c0 62       	brcc	80000cb0 <udata_end>
80000ca6:	30 02       	mov	r2,0
80000ca8:	30 03       	mov	r3,0

80000caa <udata_loop>:
80000caa:	00 a2       	st.w	r0++,r2
80000cac:	02 30       	cp.w	r0,r1
80000cae:	cf e3       	brcs	80000caa <udata_loop>

80000cb0 <udata_end>:
80000cb0:	48 9f       	lddpc	pc,80000cd4 <udata_end+0x24>
80000cb2:	00 00       	add	r0,r0
80000cb4:	00 01       	add	r1,r0
80000cb6:	00 00       	add	r0,r0
80000cb8:	00 00       	add	r0,r0
80000cba:	f0 00       	*unknown*
80000cbc:	80 00       	ld.sh	r0,r0[0x0]
80000cbe:	10 00       	add	r0,r8
80000cc0:	00 00       	add	r0,r0
80000cc2:	00 08       	add	r8,r0
80000cc4:	00 00       	add	r0,r0
80000cc6:	01 18       	ld.sh	r8,r0++
80000cc8:	80 00       	ld.sh	r0,r0[0x0]
80000cca:	15 88       	ld.ub	r8,r10[0x0]
80000ccc:	00 00       	add	r0,r0
80000cce:	01 18       	ld.sh	r8,r0++
80000cd0:	00 00       	add	r0,r0
80000cd2:	01 28       	ld.uh	r8,r0++
80000cd4:	80 00       	ld.sh	r0,r0[0x0]
80000cd6:	02 70       	tst	r0,r1

80000cd8 <atoi>:
80000cd8:	d4 01       	pushm	lr
80000cda:	30 aa       	mov	r10,10
80000cdc:	30 0b       	mov	r11,0
80000cde:	f0 1f 00 02 	mcall	80000ce4 <atoi+0xc>
80000ce2:	d8 02       	popm	pc
80000ce4:	80 00       	ld.sh	r0,r0[0x0]
80000ce6:	0e 20       	rsub	r0,r7

80000ce8 <_strtol_r>:
80000ce8:	d4 31       	pushm	r0-r7,lr
80000cea:	20 3d       	sub	sp,12
80000cec:	4c c8       	lddpc	r8,80000e1c <_strtol_r+0x134>
80000cee:	50 2c       	stdsp	sp[0x8],r12
80000cf0:	70 01       	ld.w	r1,r8[0x0]
80000cf2:	16 98       	mov	r8,r11
80000cf4:	11 3e       	ld.ub	lr,r8++
80000cf6:	e2 0e 07 06 	ld.ub	r6,r1[lr]
80000cfa:	e2 16 00 08 	andl	r6,0x8,COH
80000cfe:	cf b1       	brne	80000cf4 <_strtol_r+0xc>
80000d00:	e0 4e 00 2d 	cp.w	lr,45
80000d04:	c0 41       	brne	80000d0c <_strtol_r+0x24>
80000d06:	11 3e       	ld.ub	lr,r8++
80000d08:	30 16       	mov	r6,1
80000d0a:	c0 58       	rjmp	80000d14 <_strtol_r+0x2c>
80000d0c:	e0 4e 00 2b 	cp.w	lr,43
80000d10:	c0 21       	brne	80000d14 <_strtol_r+0x2c>
80000d12:	11 3e       	ld.ub	lr,r8++
80000d14:	58 09       	cp.w	r9,0
80000d16:	5f 0c       	sreq	r12
80000d18:	59 09       	cp.w	r9,16
80000d1a:	5f 05       	sreq	r5
80000d1c:	30 07       	mov	r7,0
80000d1e:	f9 e5 10 05 	or	r5,r12,r5
80000d22:	ee 05 18 00 	cp.b	r5,r7
80000d26:	c1 e0       	breq	80000d62 <_strtol_r+0x7a>
80000d28:	e0 4e 00 30 	cp.w	lr,48
80000d2c:	c1 31       	brne	80000d52 <_strtol_r+0x6a>
80000d2e:	11 85       	ld.ub	r5,r8[0x0]
80000d30:	35 84       	mov	r4,88
80000d32:	37 83       	mov	r3,120
80000d34:	e8 05 18 00 	cp.b	r5,r4
80000d38:	5f 04       	sreq	r4
80000d3a:	e6 05 18 00 	cp.b	r5,r3
80000d3e:	5f 05       	sreq	r5
80000d40:	e9 e5 10 05 	or	r5,r4,r5
80000d44:	ee 05 18 00 	cp.b	r5,r7
80000d48:	c0 50       	breq	80000d52 <_strtol_r+0x6a>
80000d4a:	11 9e       	ld.ub	lr,r8[0x1]
80000d4c:	31 09       	mov	r9,16
80000d4e:	2f e8       	sub	r8,-2
80000d50:	c0 98       	rjmp	80000d62 <_strtol_r+0x7a>
80000d52:	58 0c       	cp.w	r12,0
80000d54:	c0 70       	breq	80000d62 <_strtol_r+0x7a>
80000d56:	e0 4e 00 30 	cp.w	lr,48
80000d5a:	f9 b9 00 08 	moveq	r9,8
80000d5e:	f9 b9 01 0a 	movne	r9,10
80000d62:	e0 6c ff ff 	mov	r12,65535
80000d66:	ea 1c 7f ff 	orh	r12,0x7fff
80000d6a:	30 07       	mov	r7,0
80000d6c:	fc 15 80 00 	movh	r5,0x8000
80000d70:	0e 93       	mov	r3,r7
80000d72:	0e 36       	cp.w	r6,r7
80000d74:	f8 05 17 00 	moveq	r5,r12
80000d78:	0e 9c       	mov	r12,r7
80000d7a:	ea 09 0d 04 	divu	r4,r5,r9
80000d7e:	08 92       	mov	r2,r4
80000d80:	50 05       	stdsp	sp[0x0],r5
80000d82:	e2 0e 07 04 	ld.ub	r4,r1[lr]
80000d86:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
80000d8a:	f9 b0 01 37 	movne	r0,55
80000d8e:	f9 b0 00 57 	moveq	r0,87
80000d92:	50 10       	stdsp	sp[0x4],r0
80000d94:	fc c5 00 30 	sub	r5,lr,48
80000d98:	08 90       	mov	r0,r4
80000d9a:	e2 10 00 04 	andl	r0,0x4,COH
80000d9e:	c0 81       	brne	80000dae <_strtol_r+0xc6>
80000da0:	40 10       	lddsp	r0,sp[0x4]
80000da2:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
80000da6:	fc 00 01 05 	sub	r5,lr,r0
80000daa:	58 04       	cp.w	r4,0
80000dac:	c1 c0       	breq	80000de4 <_strtol_r+0xfc>
80000dae:	12 35       	cp.w	r5,r9
80000db0:	c1 a4       	brge	80000de4 <_strtol_r+0xfc>
80000db2:	04 3c       	cp.w	r12,r2
80000db4:	5f be       	srhi	lr
80000db6:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
80000dba:	e6 0e 18 00 	cp.b	lr,r3
80000dbe:	c1 01       	brne	80000dde <_strtol_r+0xf6>
80000dc0:	04 3c       	cp.w	r12,r2
80000dc2:	5f 0e       	sreq	lr
80000dc4:	40 07       	lddsp	r7,sp[0x0]
80000dc6:	0e 35       	cp.w	r5,r7
80000dc8:	5f 97       	srgt	r7
80000dca:	ef ee 00 0e 	and	lr,r7,lr
80000dce:	e6 0e 18 00 	cp.b	lr,r3
80000dd2:	c0 61       	brne	80000dde <_strtol_r+0xf6>
80000dd4:	b3 3c       	mul	r12,r9
80000dd6:	30 17       	mov	r7,1
80000dd8:	ea 0c 00 0c 	add	r12,r5,r12
80000ddc:	c0 28       	rjmp	80000de0 <_strtol_r+0xf8>
80000dde:	3f f7       	mov	r7,-1
80000de0:	11 3e       	ld.ub	lr,r8++
80000de2:	cd 0b       	rjmp	80000d82 <_strtol_r+0x9a>
80000de4:	5b f7       	cp.w	r7,-1
80000de6:	c0 e1       	brne	80000e02 <_strtol_r+0x11a>
80000de8:	e0 69 ff ff 	mov	r9,65535
80000dec:	ea 19 7f ff 	orh	r9,0x7fff
80000df0:	fc 1c 80 00 	movh	r12,0x8000
80000df4:	40 20       	lddsp	r0,sp[0x8]
80000df6:	58 06       	cp.w	r6,0
80000df8:	f2 0c 17 00 	moveq	r12,r9
80000dfc:	32 29       	mov	r9,34
80000dfe:	81 39       	st.w	r0[0xc],r9
80000e00:	c0 48       	rjmp	80000e08 <_strtol_r+0x120>
80000e02:	58 06       	cp.w	r6,0
80000e04:	fb bc 01 00 	rsubne	r12,0
80000e08:	58 0a       	cp.w	r10,0
80000e0a:	c0 60       	breq	80000e16 <_strtol_r+0x12e>
80000e0c:	20 18       	sub	r8,1
80000e0e:	58 07       	cp.w	r7,0
80000e10:	f0 0b 17 10 	movne	r11,r8
80000e14:	95 0b       	st.w	r10[0x0],r11
80000e16:	2f dd       	sub	sp,-12
80000e18:	d8 32       	popm	r0-r7,pc
80000e1a:	00 00       	add	r0,r0
80000e1c:	00 00       	add	r0,r0
80000e1e:	00 1c       	sub	r12,r0

80000e20 <strtol>:
80000e20:	d4 01       	pushm	lr
80000e22:	48 58       	lddpc	r8,80000e34 <strtol+0x14>
80000e24:	14 99       	mov	r9,r10
80000e26:	16 9a       	mov	r10,r11
80000e28:	18 9b       	mov	r11,r12
80000e2a:	70 0c       	ld.w	r12,r8[0x0]
80000e2c:	f0 1f 00 03 	mcall	80000e38 <strtol+0x18>
80000e30:	d8 02       	popm	pc
80000e32:	00 00       	add	r0,r0
80000e34:	00 00       	add	r0,r0
80000e36:	01 10       	ld.sh	r0,r0++
80000e38:	80 00       	ld.sh	r0,r0[0x0]
80000e3a:	0c e8       	st.h	--r6,r8

Disassembly of section .exception:

80001000 <_evba>:
	...

80001028 <_handle_Privilege_Violation>:
	.global _evba
	.type _evba, @function
_evba:
	.org  0x28
_handle_Privilege_Violation:
	rjmp privilegedCalls					//Check for legal priviledged calls.
80001028:	c7 a8       	rjmp	8000111c <privilegedCalls>
	...

80001100 <_handle_Supervisor_Call>:

	.org  0x100
_handle_Supervisor_Call:
	mov pc,lr								//ROSA Kernel function calls pass through here.
80001100:	1c 9f       	mov	pc,lr

80001102 <_int0>:
 *  in this case: timerISR().
 *
 **********************************************************/
	//TC0 interrupt
_int0:
	mov r12,lo(AVR32_INTC_ADDRESS)
80001102:	e0 6c 08 00 	mov	r12,2048
	orh r12,hi(AVR32_INTC_ADDRESS)
80001106:	ea 1c ff ff 	orh	r12,0xffff
	ld.w r12,r12[AVR32_INTC_IRR + GRP14]	//TC irq grp is at GRP14
8000110a:	f8 fc 01 38 	ld.w	r12,r12[312]
	andl r12,LINE0							//TC0 irq is at line 0
8000110e:	e0 1c 00 01 	andl	r12,0x1
	cp.w r12,LINE0							//Is line 0 sending interrupt signal?
80001112:	58 1c       	cp.w	r12,1
	brne _int0_exit							//No, exit
80001114:	c0 31       	brne	8000111a <_int0_exit>
	lda.w r12,timerISR						//Pointer to the timer ISR
80001116:	4b 9c       	lddpc	r12,800011f8 <contextRestoreFromISR+0x40>
	mov pc,r12								//Yes, go to the ISR.
80001118:	18 9f       	mov	pc,r12

8000111a <_int0_exit>:
_int0_exit:
	rete
8000111a:	d6 03       	rete

8000111c <privilegedCalls>:
//------------------------------------
//USERSR - user SR at the offending instant
//USERPC - user PC which contain the offending instruction

	//Investigate is this is a legal disable/enable interrupt requests
	pushm r11,r12
8000111c:	d3 01       	pushm	r11-r12
	ld.w r11,sp[USERPC]
8000111e:	7a 3b       	ld.w	r11,sp[0xc]
	mov r12,r11
80001120:	16 9c       	mov	r12,r11
	sub r12,-0x02							//Modify to get return address
80001122:	2f ec       	sub	r12,-2
	st.w sp[USERPC],r12						//Put return address on the stack
80001124:	9b 3c       	st.w	sp[0xc],r12

80001126 <priv_interruptdisable>:

	//Look for interruptDisable
priv_interruptdisable:
	lda.w r12,interruptDisable
80001126:	4b 6c       	lddpc	r12,800011fc <contextRestoreFromISR+0x44>
	cp.w r11,r12
80001128:	18 3b       	cp.w	r11,r12
	brne priv_interruptenable
8000112a:	c0 61       	brne	80001136 <priv_interruptenable>
	ld.w r12,sp[USERSR]
8000112c:	7a 2c       	ld.w	r12,sp[0x8]
	sbr r12,AVR32_SR_GM						//Ok, disable interrupts
8000112e:	b1 ac       	sbr	r12,0x10
	st.w sp[USERSR],r12
80001130:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001132:	d3 02       	popm	r11-r12
	rete
80001134:	d6 03       	rete

80001136 <priv_interruptenable>:

	//Look for interruptEnable
priv_interruptenable:
	lda.w r12,interruptEnable
80001136:	4b 3c       	lddpc	r12,80001200 <contextRestoreFromISR+0x48>
	cp.w r11,r12
80001138:	18 3b       	cp.w	r11,r12
	brne privexception
8000113a:	c0 61       	brne	80001146 <privexception>
	ld.w r12,sp[USERSR]
8000113c:	7a 2c       	ld.w	r12,sp[0x8]
	cbr r12,AVR32_SR_GM						//Ok, enable interrupts
8000113e:	b1 cc       	cbr	r12,0x10
	st.w sp[USERSR],r12
80001140:	9b 2c       	st.w	sp[0x8],r12
	popm r11,r12
80001142:	d3 02       	popm	r11-r12
	rete
80001144:	d6 03       	rete

80001146 <privexception>:

privexception:								//Not ok.
	rjmp $									//End here as we received an illegal privileged call.
80001146:	c0 08       	rjmp	80001146 <privexception>

80001148 <interruptInit>:
 *
 * C prototypes:
 * 	extern void interruptInit(void);
 **********************************************************/
interruptInit:
	pushm r11,r12,lr
80001148:	d7 01       	pushm	r11-r12,lr
	//Get autovector offset to _int0
	lda.w r11,_int0
8000114a:	fe cb 00 48 	sub	r11,pc,72
	lda.w r12,_evba
8000114e:	4a ec       	lddpc	r12,80001204 <contextRestoreFromISR+0x4c>
	sub r11,r12
80001150:	18 1b       	sub	r11,r12

	//Calculate int level
	mov r12,INTLEVEL0
80001152:	30 0c       	mov	r12,0
	or r11,r11,r12 << INTLEVEL_OFFSET
80001154:	f7 ec 11 eb 	or	r11,r11,r12<<0x1e

	//Store the _int0 level and autovector offset to the interrupt priority register
	mov r12,lo(AVR32_INTC_ADDRESS+GRP14)
80001158:	e0 6c 08 38 	mov	r12,2104
	orh r12,hi(AVR32_INTC_ADDRESS+GRP14)
8000115c:	ea 1c ff ff 	orh	r12,0xffff
	st.w r12,r11
80001160:	99 0b       	st.w	r12[0x0],r11
	popm r11,r12,lr
80001162:	d7 02       	popm	r11-r12,lr
	mov pc,lr
80001164:	1c 9f       	mov	pc,lr

80001166 <interruptDisable>:
 * C prototype:
 * 	void interruptDisable(void);
 *
 *********************************************************/
interruptDisable:
	ssrf AVR32_SR_GM
80001166:	d3 03       	ssrf	0x10
	mov pc,lr
80001168:	1c 9f       	mov	pc,lr

8000116a <interruptEnable>:
 * C prototype:
 * 	void interruptEnable(void);
 *
 *********************************************************/
interruptEnable:
	csrf AVR32_SR_GM
8000116a:	d5 03       	csrf	0x10
	mov pc,lr
8000116c:	1c 9f       	mov	pc,lr

8000116e <isInterruptEnabled>:
 * C prototype:
 * 	int isInterruptEnabled(void);
 *
 *********************************************************/
isInterruptEnabled:
	mfsr r12,0
8000116e:	e1 bc 00 00 	mfsr	r12,0x0
	lsr r12,AVR32_SR_GM
80001172:	b1 8c       	lsr	r12,0x10
	andl r12,TRUE
80001174:	e0 1c 00 01 	andl	r12,0x1
	eorl r12,TRUE
80001178:	ec 1c 00 01 	eorl	r12,0x1
	mov pc,lr
8000117c:	1c 9f       	mov	pc,lr

8000117e <contextSaveFromISR>:
.equ SFINT0_R9, 0x06*0x04+SFINT0OFFSET
.equ SFINT0_R8, 0x07*0x04+SFINT0OFFSET

contextSaveFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
8000117e:	4a 3c       	lddpc	r12,80001208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
80001180:	78 0c       	ld.w	r12,r12[0x0]

	//Save working registers
	st.w r12[TCB.SAVER0],r0
80001182:	99 60       	st.w	r12[0x18],r0
	ld.w r0,sp[SFINT0_R12]
80001184:	7a 90       	ld.w	r0,sp[0x24]
	st.w r12[TCB.SAVEREG.R12],r0
80001186:	99 c0       	st.w	r12[0x30],r0

	//Save SR
	ld.w r0,sp[SFINT0_SR]
80001188:	7a 60       	ld.w	r0,sp[0x18]
	st.w r12[TCB.SAVESR],r0
8000118a:	99 80       	st.w	r12[0x20],r0

	//Read register from the stack
	ld.w r8,sp[SFINT0_R8]
8000118c:	7a d8       	ld.w	r8,sp[0x34]
	ld.w r9,sp[SFINT0_R9]
8000118e:	7a c9       	ld.w	r9,sp[0x30]
	ld.w r10,sp[SFINT0_R10]
80001190:	7a ba       	ld.w	r10,sp[0x2c]
	ld.w r11,sp[SFINT0_R11]
80001192:	7a ab       	ld.w	r11,sp[0x28]

	//Save registers
	mov r0,TCB.SAVEREG.R11
80001194:	33 40       	mov	r0,52
	add r0,r12
80001196:	18 00       	add	r0,r12
	stmts r0,r0-r11
80001198:	ed c0 0f ff 	stmts	r0,r0-r11

	//Save r7_task
	ld.w r0,sp[SFINT0_R7_TASK]
8000119c:	7a 50       	ld.w	r0,sp[0x14]
	st.w r12[TCB.SAVEREG.R7],r0
8000119e:	f9 40 00 44 	st.w	r12[68],r0

	//Save RETADDR
	ld.w r0,sp[SFINT0_PC]
800011a2:	7a 70       	ld.w	r0,sp[0x1c]
	st.w r12[TCB.RETADDR],r0
800011a4:	99 90       	st.w	r12[0x24],r0

	//Save LR
	ld.w r0,sp[SFINT0_LR]			//This points back to the task
800011a6:	7a 80       	ld.w	r0,sp[0x20]
	st.w r12[TCB.SAVEREG.LR],r0
800011a8:	99 a0       	st.w	r12[0x28],r0

	//Save USP
	mov r0,sp
800011aa:	1a 90       	mov	r0,sp
	st.w --sp,r0
800011ac:	1a d0       	st.w	--sp,r0
	stmts sp,sp
800011ae:	ed cd 20 00 	stmts	sp,sp
	ld.w r0,sp++
800011b2:	1b 00       	ld.w	r0,sp++
	st.w r12[TCB.SAVEUSP],r0
800011b4:	99 50       	st.w	r12[0x14],r0

	mov pc,lr
800011b6:	1c 9f       	mov	pc,lr

800011b8 <contextRestoreFromISR>:
* Context of the TCB referenced by EXECTASK will be restored.
*
*********************************************************/
contextRestoreFromISR:
	//Fetch the current executing task
	lda.w r12,EXECTASK
800011b8:	49 4c       	lddpc	r12,80001208 <contextRestoreFromISR+0x50>
	ld.w r12,r12[0x0]
800011ba:	78 0c       	ld.w	r12,r12[0x0]

	//Restore USP
	ld.w r0,r12[TCB.SAVEUSP]
800011bc:	78 50       	ld.w	r0,r12[0x14]
	st.w --sp,r0
800011be:	1a d0       	st.w	--sp,r0
	ldmts sp,sp
800011c0:	e5 cd 20 00 	ldmts	sp,sp
	ld.w r0,sp++							//USP is in r0
800011c4:	1b 00       	ld.w	r0,sp++

	//Restore LR
	ld.w r0,r12[TCB.SAVEREG.LR]
800011c6:	78 a0       	ld.w	r0,r12[0x28]
	st.w sp[SFINT0_LR],r0					//Restore lr on the stack
800011c8:	9b 80       	st.w	sp[0x20],r0

	//Restore RETADDR
	ld.w r0,r12[TCB.RETADDR]
800011ca:	78 90       	ld.w	r0,r12[0x24]
	st.w sp[SFINT0_PC],r0					//Restore return address on stack
800011cc:	9b 70       	st.w	sp[0x1c],r0

	//Restore registers
	mov r0,TCB.SAVEREG.R11
800011ce:	33 40       	mov	r0,52
	add r0,r12
800011d0:	18 00       	add	r0,r12
	ldmts r0,r0-r11
800011d2:	e5 c0 0f ff 	ldmts	r0,r0-r11

	//Restore SR
	ld.w r0,r12[TCB.SAVESR]
800011d6:	78 80       	ld.w	r0,r12[0x20]
	st.w sp[SFINT0_SR],r0					//Put the new SR on the stack
800011d8:	9b 60       	st.w	sp[0x18],r0

	//Restore of R8-R12
	ld.w r0,r12[TCB.SAVEREG.R12]
800011da:	78 c0       	ld.w	r0,r12[0x30]
	st.w sp[SFINT0_R12],r0
800011dc:	9b 90       	st.w	sp[0x24],r0
	st.w sp[SFINT0_R11],r11
800011de:	9b ab       	st.w	sp[0x28],r11
	st.w sp[SFINT0_R10],r10
800011e0:	9b ba       	st.w	sp[0x2c],r10
	st.w sp[SFINT0_R9],r9
800011e2:	9b c9       	st.w	sp[0x30],r9
	st.w sp[SFINT0_R8],r8
800011e4:	9b d8       	st.w	sp[0x34],r8

	//Restore r7
	ld.w r0,r12[TCB.SAVEREG.R7]				//This is the r7_user
800011e6:	79 10       	ld.w	r0,r12[0x44]
	st.w sp[SFINT0_R7_TASK],r0				//Save r7_user to the stack, in order to not have the r7_user destroyed.
800011e8:	9b 50       	st.w	sp[0x14],r0

	//Restore work registers
	ld.w r0,r12[TCB.SAVER0]
800011ea:	78 60       	ld.w	r0,r12[0x18]

	//Restart timer 0, necessary as timer is stopped by the irq event.
	pushm lr
800011ec:	d4 01       	pushm	lr
	call timerStart
800011ee:	f0 1f 00 08 	mcall	8000120c <contextRestoreFromISR+0x54>
	popm lr
800011f2:	d4 02       	popm	lr

	//Return back to the ISR handler
	mov pc,lr
800011f4:	1c 9f       	mov	pc,lr
800011f6:	00 00       	add	r0,r0
800011f8:	80 00       	ld.sh	r0,r0[0x0]
800011fa:	04 10       	sub	r0,r2
800011fc:	80 00       	ld.sh	r0,r0[0x0]
800011fe:	11 66       	ld.uh	r6,--r8
80001200:	80 00       	ld.sh	r0,r0[0x0]
80001202:	11 6a       	ld.uh	r10,--r8
80001204:	80 00       	ld.sh	r0,r0[0x0]
80001206:	10 00       	add	r0,r8
80001208:	00 00       	add	r0,r0
8000120a:	01 20       	ld.uh	r0,r0++
8000120c:	80 00       	ld.sh	r0,r0[0x0]
8000120e:	0b ce       	ld.ub	lr,r5[0x4]
	...
