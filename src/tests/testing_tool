import sys, getopt, serial, os
from array import *

# TODO: Directory to store reports from ROSA testing tool
directory = './logs'
# The COM port that will be used for the testing session
com_port = None

# The total number of test cases
total_tc_number = 0;
# The currently executing test case
current_tc = 0;
# The state of the currently executing test case
# 0 means it hasn't reported and 1 that it has reported
current_tc_state = 0;
# Array buffer of chars
buffer = array('B', []);

# Check if the directory to store reports exist and create it if it doesn't
if not os.path.exists(directory):
	os.makedirs(directory)

# Get the arguments
try:
	options, arguments = getopt.getopt(sys.argv[1:], "hc:", ["com_port="])
except getopt.GetoptError:
    print('testing_tool.py -c <com_port>')
    sys.exit(2)
if (len(options) == 0):
	print('testing_tool.py -c <com_port>')
	sys.exit(2)
for option, argument in options:
	if option in ("-c", "--com_port"):
		com_port = argument
	else:
		print('testing_tool.py -c <com_port>')
		sys.exit(2)
print('COM port #%s will be used.\n' % com_port)

port = 'COM' + str(com_port)
ser = serial.Serial(port,56700)
value = 0

while 1:
	try:
		#If the total number of test cases is already set and we haven't reached the maximum number of test cases
		if (total_tc_number != 0 and current_tc == total_tc_number + 1):
			break
		value = ser.read()
		if (value == b'?'):
			# The board is asking "What should I do?"
			if (total_tc_number == 0):
				# Testing tool answers "Give me the number of test cases."
				print('Give me the number of test cases.')
				ser.write(b'#');
			else:
				# If there is a current test case running and it has not reported yet report failure
				# else set the report flag for the next tast case to 0
				if (current_tc != 0 and current_tc_state == 0):
					print('Failure!')
					print('---------------------------------------')
				else:
					current_tc_state = 0
				# Testing tool answers "Run the current test case." and increments it
				ser.write(b'%');
				ser.write(str(current_tc).encode())
				ser.write(b'\r')
				current_tc = current_tc + 1
		elif (value == b'^'):
			current_tc_state = 1;
			print('Success!')
			print('---------------------------------------')
		elif (value == b'_'):
			current_tc_state = 1;
			print('Failure!')
			print('---------------------------------------')
		elif (value == b'\x00'):
			# If there is nothing in the buffer continue
			if (len(buffer) == 0):
				continue
			# If the total number of test cases is not set, set it
			if (total_tc_number == 0):
				# This is the total number of test cases
				total_tc_number = int(buffer.tostring())
				print("The total number of test cases is %d." % total_tc_number)
			else:
				# The board has sent an end transmission character - flush the buffer and print the test case ID
				print(buffer[3:].tostring())
			# Empty the buffer
			buffer = array('B', [])
		elif (value == b''):
			continue
		else:
			# Append to the buffer
			buffer.append(ord(value));
	# Catch Ctrl-C
	except KeyboardInterrupt:
		print('Testing tool terminated by the user.')
		exit(2)