import sys, getopt, serial, os, webbrowser
from array import *
from enum import Enum
from collections import namedtuple

# TODO: Directory to store reports from ROSA testing tool
directory = './logs'
# The COM port that will be used for the testing session
comPort = None

# The total number of test cases
totalNumberOfTestCases = 0;
# The currently executing test case
currentTestCaseNumber = 0
previousTestCase = None
currentTestCase = None
# Array buffer of chars
buffer = array('B', []);
#Counter for success/failures
successCounter = 0
failureCounter = 0
# Performance tests arguments counter
argumentsCounter = 0;
# Result from performance test
ticks = -2

# Check if the directory to store reports exist and create it if it doesn't
if not os.path.exists(directory):
	os.makedirs(directory)

# Get the arguments
try:
	options, arguments = getopt.getopt(sys.argv[1:], "hc:", ["com_port="])
except getopt.GetoptError:
    print('testing_tool.py -c <com_port>')
    sys.exit(2)
if (len(options) == 0):
	print('testing_tool.py -c <com_port>')
	sys.exit(2)
for option, argument in options:
	if option in ("-c", "--com_port"):
		comPort = argument
	else:
		print('testing_tool.py -c <com_port>')
		sys.exit(2)
print('COM port #%s will be used.\n' % comPort)

port = 'COM' + str(comPort)
ser = serial.Serial(port,56700,timeout=0)
value = 0

numberOfTestCasesMsg = 'The total number of test cases is {0}.'
successfulTestCasesMsg = '<div style=\'padding-top:20px;color:green\'>Successful test cases: {0}.<div>'
unsuccessfulTestCasesMsg = '<div style=\'padding-top:5px;color:red\'>Unsuccessful test cases: {0}.<div>'
currentResult = ''
currentId = ''

html = '<html style="background-image: url(\'background.png\');color: #353535; font-family:\'Verdana\';"><head><script type="text/javascript" src="loader.js"></script><script type="text/javascript">google.charts.load("current", {{"packages":["corechart"]}});</script></head><title>ROSA Test Cases Results</title><body><div style=\'padding:40px\'><div>{0}</div><div style=\'display:table;\'>{1}</div><div>{2}</div></div><body></html>'
title = '<div style=\'display: table; padding-bottom: 15px;\'><div style=\'background-image: url("logo.png");background-size: 40px;height: 40px;background-repeat: no-repeat;display: table-cell;width: 40px;padding-right: 15px;\'></div><div style="font-size:larger;display: table-cell;vertical-align: middle;height: 40px;">ROSA Test Cases Results</div></div>'
testInformation = '<div style=\'padding-bottom:10px;\'>{0}</div>'
table = ''
row = '<div style=\'display: table-row;\'><div style=\'background-image: url("{0}.png");background-repeat:no-repeat;background-size:13px;display:table-cell;background-position:center;width:30px;\'></div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;\'>{1}</div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;padding-left:20px;\'>{2}</div></div>'
rowPerformance = '<div style=\'display: table-row;\'><div style=\'background-image: url("success.png");background-repeat:no-repeat;background-size:13px;display:table-cell;background-position:center;width:30px;\'></div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;\'>{0}</div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;padding-left:20px;\'>{1}</div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;padding-left:20px;\'>{2}</div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;padding-left:20px;\'>{3}</div><div style=\'display: table-cell;height: 25px;vertical-align: middle;font-size: smaller;padding-left:20px;\'>{4}</div></div>'
planHeader = '</div><div style=\'font-size:larger;padding-bottom:15px;padding-top:15px;\'>{0}</div><div style=\'display:table;\'>'
suiteHeader = '</div><div style=\'padding-bottom:15px;padding-top:15px;\'>{0}</div><div style=\'display:table;\'>'

plot = """</div><script type='text/javascript'>
      google.charts.setOnLoadCallback(drawChart);
      function drawChart() {{
        var data = google.visualization.arrayToDataTable([
          {0}
        ]);

        var options = {{
		  colors: ['{3}'],
		  backgroundColor: '#F5F5F5',
		  legend: {{position: 'none'}},
          title: '{1}',
          hAxis: {{title: '{2}',  titleTextStyle: {{color: '{3}'}}}},
          vAxis: {{title: '{4}', minValue: 0, titleTextStyle: {{color: '{3}'}}}}
        }};

        var chart = new google.visualization.AreaChart(document.getElementById('{1}'));
        chart.draw(data, options);
      }}
    </script>
	<div id='{1}' style='padding-top:20px;padding-bottom:20px;width:700px;height:350px;'></div>
	<div style=\'display:table;\'>"""

plotArrays = ""


# States INITIALIZE, WAITING_FOR_NUMBER_OF_TEST_CASES, WAITING_FOR_TEST_CASE_INFORMATION, WAITING_FOR_NORMAL_TEST_CASE_RESULT, WAITING_FOR_PERFORMANCE_TEST_CASE_RESULT 
class States(Enum):
	INITIALIZE = 0
	WAITING_FOR_NUMBER_OF_TEST_CASES = 1
	WAITING_FOR_REQUEST = 2
	REPORT_RESULT = 3
	WAITING_FOR_TEST_CASE_INFORMATION = 4
	WAITING_FOR_NORMAL_TEST_CASE_RESULT = 5
	WAITING_FOR_PERFORMANCE_TEST_CASE_RESULT = 6
	SENDING_PERFORMANCE_TEST_CASE_INFORMATION = 7
	ASKING_FOR_THE_SAME_PERFORMANCE_TEST = 8
	FINISHED = 9

TestCase = namedtuple('TestCase', 'id description plan suite type min max')

state = States.INITIALIZE

while 1:
	try:
		if (state is States.FINISHED):
			successfulTestCasesMsg = successfulTestCasesMsg.format(successCounter)
			unsuccessfulTestCasesMsg = unsuccessfulTestCasesMsg.format(failureCounter)
			html = html.format(title + testInformation, table, successfulTestCasesMsg + unsuccessfulTestCasesMsg)
			
			path = os.path.abspath('temp.html')
			url = 'file://' + path

			with open(path, 'w') as f:
				f.write(html)
			webbrowser.open(url)
			break
		value = ser.read()
		if (state is States.INITIALIZE):
			if (value == b'?'):
				# Testing tool answers "Give me the number of test cases."
				print('Give me the number of test cases.')
				state = States.WAITING_FOR_NUMBER_OF_TEST_CASES
				# print("State changed to States.WAITING_FOR_NUMBER_OF_TEST_CASES")
				ser.write(b'#');
		elif (state is States.WAITING_FOR_NUMBER_OF_TEST_CASES):
			if (value == b''):
				continue
			if (value == b'\x00'):
				# If there is nothing in the buffer continue
				if (len(buffer) == 0):
					continue
				# This is the total number of test cases
				totalNumberOfTestCases = int(buffer.tostring())
				numberOfTestCasesMsg = numberOfTestCasesMsg.format(totalNumberOfTestCases)
				testInformation = testInformation.format(numberOfTestCasesMsg)
				# Empty the buffer
				buffer = array('B', [])
				state = States.WAITING_FOR_REQUEST
				# print("State changed to States.WAITING_FOR_REQUEST")
			else:
				# Append to the buffer
				buffer.append(ord(value))
		elif (state is States.WAITING_FOR_REQUEST):
			if (value == b'?'):
				# Testing tool answers "Run the current test case." and increments it
				state = States.WAITING_FOR_TEST_CASE_INFORMATION
				# print("State changed to States.WAITING_FOR_TEST_CASE_INFORMATION")
				ser.write(b'%');
				ser.write(str(currentTestCaseNumber).encode())
				ser.write(b'\r')
				currentTestCaseNumber = currentTestCaseNumber + 1
		elif (state is States.ASKING_FOR_THE_SAME_PERFORMANCE_TEST):
			if (value == b'?'):
				# Testing tool answers "Run the current test case." and increments it
				state = States.WAITING_FOR_TEST_CASE_INFORMATION
				# print("State changed to States.WAITING_FOR_TEST_CASE_INFORMATION")
				ser.write(b'%');
				ser.write(str(currentTestCaseNumber-1).encode())
				ser.write(b'\r')
		elif (state is States.WAITING_FOR_TEST_CASE_INFORMATION):
			if (value == b''):
				continue
			if (value == b'\x00'):
				# If there is nothing in the buffer continue
				if (len(buffer) == 0):
					continue
				else:
					# The board has sent an end transmission character - flush the buffer and print the test case ID
					id = ''
					description = ''
					plan = ''
					suite = ''
					type = ''
					min = -1
					max = -1
					tuplesArray = buffer[3:].tostring().decode('ascii').strip().strip("\n").strip("\r").split("&")
					for tuple in tuplesArray:
						keyValueArray = tuple.split("=")
						if (keyValueArray[0] == 'id'):
							id = keyValueArray[1]
						elif (keyValueArray[0] == 'description'):
							description = keyValueArray[1]
						elif (keyValueArray[0] == 'plan'):
							plan = keyValueArray[1]
						elif (keyValueArray[0] == 'suite'):
							suite = keyValueArray[1]
						elif (keyValueArray[0] == 'type'):
							type = keyValueArray[1]
						elif (keyValueArray[0] == 'min'):
							min = int(keyValueArray[1])
						elif (keyValueArray[0] == 'max'):
							max = int(keyValueArray[1])
					if (currentTestCase is not None):
						previousTestCase = currentTestCase
					currentTestCase = TestCase(id, description, plan, suite, type, min, max)
					if ((previousTestCase is None) or (previousTestCase.plan != currentTestCase.plan)):
						table = table + planHeader.format('Test Plan: ' + currentTestCase.plan )
					if ((previousTestCase is None) or (previousTestCase.suite != currentTestCase.suite)):	
						table = table + suiteHeader.format('Test Suite: ' + currentTestCase.suite)
					# Empty the buffer
					buffer = array('B', [])
					# Check the type and put in correct state
					if (currentTestCase.type == 'f'):
						state = States.WAITING_FOR_NORMAL_TEST_CASE_RESULT
						# print("State changed to States.WAITING_FOR_NORMAL_TEST_CASE_RESULT")
					elif (currentTestCase.type == 'sp'):
						if (previousTestCase is None or (previousTestCase is not None and currentTestCase.id != previousTestCase.id)):
							argumentsCounter = currentTestCase.min
							plotArrays += "['Microseconds', 'Tasks']"
						else:
							argumentsCounter = argumentsCounter + 1
						state = States.SENDING_PERFORMANCE_TEST_CASE_INFORMATION
						# print("State changed to States.SENDING_PERFORMANCE_TEST_CASE_INFORMATION")
					elif (currentTestCase.type == 'mp'):
						if (previousTestCase is None or (previousTestCase is not None and currentTestCase.id != previousTestCase.id)):
							argumentsCounter = currentTestCase.min
							plotArrays += "['Bytes', 'Tasks']"
						else:
							argumentsCounter = argumentsCounter + 1
						state = States.SENDING_PERFORMANCE_TEST_CASE_INFORMATION
						# print("State changed to States.SENDING_PERFORMANCE_TEST_CASE_INFORMATION")
			else:
				# Append to the buffer
				buffer.append(ord(value));
		elif (state is States.WAITING_FOR_NORMAL_TEST_CASE_RESULT):
			if (value == b'^'):
				successCounter += 1
				currentResult = 'success'
				print('Success!')
			elif (value == b'_'):
				failureCounter += 1
				currentResult = 'failure'
				print('Failure!')
			elif (value == b'?'):
				failureCounter += 1
				currentResult = 'failure'
				print('Failure!')
			else:
				continue
			state = States.REPORT_RESULT
			# print("State changed to States.REPORT_RESULT")
		elif (state is States.SENDING_PERFORMANCE_TEST_CASE_INFORMATION):
			state = States.WAITING_FOR_PERFORMANCE_TEST_CASE_RESULT
			# print("State changed to States.WAITING_FOR_PERFORMANCE_TEST_CASE_RESULT")
			if (currentTestCase.min == -1 and currentTestCase.max == -1):
				ser.write(str(-1).encode())
				ser.write(b'\r')
			elif (argumentsCounter <= currentTestCase.max):
				ser.write(str(argumentsCounter).encode())
				ser.write(b'\r')
		elif (state is States.WAITING_FOR_PERFORMANCE_TEST_CASE_RESULT):
			if (value == b''):
				continue
			if (value == b'\x00'):
				# If there is nothing in the buffer continue
				if (len(buffer) == 0):
					continue
				else:
					# print("State changed to States.REPORT_RESULT")
					state = States.REPORT_RESULT
					# print(buffer);
					ticks = int(buffer[3:].tostring().decode('ascii').strip().strip("\n").strip("\r"))
					print(ticks)
					# Empty the buffer
					buffer = array('B', [])
			elif (value == b'?'):
				ticks = -1
				# Empty the buffer
				buffer = array('B', [])
				# print("State changed to States.REPORT_RESULT")
				state = States.REPORT_RESULT
			else:
				# Append to the buffer
				buffer.append(ord(value));
		elif (state is States.REPORT_RESULT):
			print(currentTestCase.id)
			if (ticks != -2):
				if (ticks == -1):
					table = table + rowPerformance.format(currentTestCase.id, currentTestCase.description, '-', '-', '-')
					if (currentTestCaseNumber == totalNumberOfTestCases):
						state = States.FINISHED
						# print("State changed to States.FINISHED")
					else:
						state = States.WAITING_FOR_REQUEST
						# print("State changed to States.WAITING_FOR_REQUEST")
				else:
					plotValue = 0
					plotName = ''
					plotColor = ''
					yAxis = ''
					if (currentTestCase.type == 'sp'):
						table = table + rowPerformance.format(currentTestCase.id, currentTestCase.description, argumentsCounter, str(ticks) + ' ticks', "{0:.5f}".format(ticks * (1/6000)) + ' miliseconds')
						plotValue = float("{0:.5f}".format(ticks * (1/6000)))
						plotName = '-SPEED-TEST'
						plotColor = '#3EA99F'
						yAxis = 'Microseconds'
					elif (currentTestCase.type == 'mp'):
						table = table + rowPerformance.format(currentTestCase.id, currentTestCase.description, argumentsCounter, str(ticks) + ' q', str(ticks*4) + ' bytes')
						plotValue = ticks * 4
						plotName = '-MEMORY-TEST'
						plotColor = '#F75D59'
						yAxis = 'Bytes'
					if (currentTestCase.min != -1 and currentTestCase.max != -1 and argumentsCounter < currentTestCase.max):
						plotArrays += ",[" + str(argumentsCounter) + ", " + str(plotValue) + "]"
						# print("State changed to States.ASKING_FOR_THE_SAME_PERFORMANCE_TEST")
						state = States.ASKING_FOR_THE_SAME_PERFORMANCE_TEST
					else:
						if (currentTestCase.min != -1 and currentTestCase.max != -1):
							table += plot.format(plotArrays, currentTestCase.id + plotName, 'Tasks', plotColor, yAxis)
						plotArrays = ''
						if (currentTestCaseNumber == totalNumberOfTestCases):
							state = States.FINISHED
							# print("State changed to States.FINISHED")
						else:
							state = States.WAITING_FOR_REQUEST
							# print("State changed to States.WAITING_FOR_REQUEST")
				ticks = -2
			else:
				table = table + row.format(currentResult, currentTestCase.id, currentTestCase.description)
				if (currentTestCaseNumber == totalNumberOfTestCases):
					state = States.FINISHED
					# print("State changed to States.FINISHED")
				else:
					state = States.WAITING_FOR_REQUEST
					# print("State changed to States.WAITING_FOR_REQUEST")
	# Catch Ctrl-C
	except KeyboardInterrupt:
		print('Testing tool terminated by the user.')
		exit(2)